
2_ex6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002964  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a70  08002a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a90  08002a90  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a90  08002a90  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a90  08002a90  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a90  08002a90  00012a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a94  08002a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000002c  08002ac4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002ac4  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000832e  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ab  00000000  00000000  00028383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00029930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002a298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016357  00000000  00000000  0002ab48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009510  00000000  00000000  00040e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000820ba  00000000  00000000  0004a3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc469  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002660  00000000  00000000  000cc4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a58 	.word	0x08002a58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08002a58 	.word	0x08002a58

0800014c <updateClockBuffer>:
  * @brief  The application entry point.
  * @retval int
  */
int hour = 15 , minute = 8 , second = 50;
int led_buffer[4] = {1 , 2 , 3 , 4};
void updateClockBuffer(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	// if hour <10 , 7seg1 = 0 , 7seg2 = hour
     if(hour < 10 ){
 8000150:	4b42      	ldr	r3, [pc, #264]	; (800025c <updateClockBuffer+0x110>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b09      	cmp	r3, #9
 8000156:	dc06      	bgt.n	8000166 <updateClockBuffer+0x1a>
    	 led_buffer[0] = 0;
 8000158:	4b41      	ldr	r3, [pc, #260]	; (8000260 <updateClockBuffer+0x114>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
    	 led_buffer[1] = hour;
 800015e:	4b3f      	ldr	r3, [pc, #252]	; (800025c <updateClockBuffer+0x110>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4a3f      	ldr	r2, [pc, #252]	; (8000260 <updateClockBuffer+0x114>)
 8000164:	6053      	str	r3, [r2, #4]
     }
     if(hour %10 == 0){
 8000166:	4b3d      	ldr	r3, [pc, #244]	; (800025c <updateClockBuffer+0x110>)
 8000168:	6819      	ldr	r1, [r3, #0]
 800016a:	4b3e      	ldr	r3, [pc, #248]	; (8000264 <updateClockBuffer+0x118>)
 800016c:	fb83 2301 	smull	r2, r3, r3, r1
 8000170:	109a      	asrs	r2, r3, #2
 8000172:	17cb      	asrs	r3, r1, #31
 8000174:	1ad2      	subs	r2, r2, r3
 8000176:	4613      	mov	r3, r2
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	4413      	add	r3, r2
 800017c:	005b      	lsls	r3, r3, #1
 800017e:	1aca      	subs	r2, r1, r3
 8000180:	2a00      	cmp	r2, #0
 8000182:	d10d      	bne.n	80001a0 <updateClockBuffer+0x54>
    	 led_buffer[0] = hour/10;
 8000184:	4b35      	ldr	r3, [pc, #212]	; (800025c <updateClockBuffer+0x110>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a36      	ldr	r2, [pc, #216]	; (8000264 <updateClockBuffer+0x118>)
 800018a:	fb82 1203 	smull	r1, r2, r2, r3
 800018e:	1092      	asrs	r2, r2, #2
 8000190:	17db      	asrs	r3, r3, #31
 8000192:	1ad3      	subs	r3, r2, r3
 8000194:	4a32      	ldr	r2, [pc, #200]	; (8000260 <updateClockBuffer+0x114>)
 8000196:	6013      	str	r3, [r2, #0]
    	 led_buffer[1] = 0;
 8000198:	4b31      	ldr	r3, [pc, #196]	; (8000260 <updateClockBuffer+0x114>)
 800019a:	2200      	movs	r2, #0
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	e018      	b.n	80001d2 <updateClockBuffer+0x86>
     }
     else{
    	 led_buffer[0]= hour/10;
 80001a0:	4b2e      	ldr	r3, [pc, #184]	; (800025c <updateClockBuffer+0x110>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a2f      	ldr	r2, [pc, #188]	; (8000264 <updateClockBuffer+0x118>)
 80001a6:	fb82 1203 	smull	r1, r2, r2, r3
 80001aa:	1092      	asrs	r2, r2, #2
 80001ac:	17db      	asrs	r3, r3, #31
 80001ae:	1ad3      	subs	r3, r2, r3
 80001b0:	4a2b      	ldr	r2, [pc, #172]	; (8000260 <updateClockBuffer+0x114>)
 80001b2:	6013      	str	r3, [r2, #0]
    	 led_buffer[1]= hour%10;
 80001b4:	4b29      	ldr	r3, [pc, #164]	; (800025c <updateClockBuffer+0x110>)
 80001b6:	6819      	ldr	r1, [r3, #0]
 80001b8:	4b2a      	ldr	r3, [pc, #168]	; (8000264 <updateClockBuffer+0x118>)
 80001ba:	fb83 2301 	smull	r2, r3, r3, r1
 80001be:	109a      	asrs	r2, r3, #2
 80001c0:	17cb      	asrs	r3, r1, #31
 80001c2:	1ad2      	subs	r2, r2, r3
 80001c4:	4613      	mov	r3, r2
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	4413      	add	r3, r2
 80001ca:	005b      	lsls	r3, r3, #1
 80001cc:	1aca      	subs	r2, r1, r3
 80001ce:	4b24      	ldr	r3, [pc, #144]	; (8000260 <updateClockBuffer+0x114>)
 80001d0:	605a      	str	r2, [r3, #4]
     }
     //
     if(minute < 10 ){
 80001d2:	4b25      	ldr	r3, [pc, #148]	; (8000268 <updateClockBuffer+0x11c>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2b09      	cmp	r3, #9
 80001d8:	dc06      	bgt.n	80001e8 <updateClockBuffer+0x9c>
         led_buffer[2] = 0;
 80001da:	4b21      	ldr	r3, [pc, #132]	; (8000260 <updateClockBuffer+0x114>)
 80001dc:	2200      	movs	r2, #0
 80001de:	609a      	str	r2, [r3, #8]
         led_buffer[3] = minute;
 80001e0:	4b21      	ldr	r3, [pc, #132]	; (8000268 <updateClockBuffer+0x11c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a1e      	ldr	r2, [pc, #120]	; (8000260 <updateClockBuffer+0x114>)
 80001e6:	60d3      	str	r3, [r2, #12]
      }
     if(minute %10 == 0){
 80001e8:	4b1f      	ldr	r3, [pc, #124]	; (8000268 <updateClockBuffer+0x11c>)
 80001ea:	6819      	ldr	r1, [r3, #0]
 80001ec:	4b1d      	ldr	r3, [pc, #116]	; (8000264 <updateClockBuffer+0x118>)
 80001ee:	fb83 2301 	smull	r2, r3, r3, r1
 80001f2:	109a      	asrs	r2, r3, #2
 80001f4:	17cb      	asrs	r3, r1, #31
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	4613      	mov	r3, r2
 80001fa:	009b      	lsls	r3, r3, #2
 80001fc:	4413      	add	r3, r2
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	1aca      	subs	r2, r1, r3
 8000202:	2a00      	cmp	r2, #0
 8000204:	d10d      	bne.n	8000222 <updateClockBuffer+0xd6>
         led_buffer[2] = minute/10;
 8000206:	4b18      	ldr	r3, [pc, #96]	; (8000268 <updateClockBuffer+0x11c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a16      	ldr	r2, [pc, #88]	; (8000264 <updateClockBuffer+0x118>)
 800020c:	fb82 1203 	smull	r1, r2, r2, r3
 8000210:	1092      	asrs	r2, r2, #2
 8000212:	17db      	asrs	r3, r3, #31
 8000214:	1ad3      	subs	r3, r2, r3
 8000216:	4a12      	ldr	r2, [pc, #72]	; (8000260 <updateClockBuffer+0x114>)
 8000218:	6093      	str	r3, [r2, #8]
         led_buffer[3] = 0;
 800021a:	4b11      	ldr	r3, [pc, #68]	; (8000260 <updateClockBuffer+0x114>)
 800021c:	2200      	movs	r2, #0
 800021e:	60da      	str	r2, [r3, #12]
       }
      else{
         led_buffer[2]= minute/10;
         led_buffer[3]= minute%10;
       }
}
 8000220:	e018      	b.n	8000254 <updateClockBuffer+0x108>
         led_buffer[2]= minute/10;
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <updateClockBuffer+0x11c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a0f      	ldr	r2, [pc, #60]	; (8000264 <updateClockBuffer+0x118>)
 8000228:	fb82 1203 	smull	r1, r2, r2, r3
 800022c:	1092      	asrs	r2, r2, #2
 800022e:	17db      	asrs	r3, r3, #31
 8000230:	1ad3      	subs	r3, r2, r3
 8000232:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <updateClockBuffer+0x114>)
 8000234:	6093      	str	r3, [r2, #8]
         led_buffer[3]= minute%10;
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <updateClockBuffer+0x11c>)
 8000238:	6819      	ldr	r1, [r3, #0]
 800023a:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <updateClockBuffer+0x118>)
 800023c:	fb83 2301 	smull	r2, r3, r3, r1
 8000240:	109a      	asrs	r2, r3, #2
 8000242:	17cb      	asrs	r3, r1, #31
 8000244:	1ad2      	subs	r2, r2, r3
 8000246:	4613      	mov	r3, r2
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	4413      	add	r3, r2
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	1aca      	subs	r2, r1, r3
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <updateClockBuffer+0x114>)
 8000252:	60da      	str	r2, [r3, #12]
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	20000000 	.word	0x20000000
 8000260:	2000000c 	.word	0x2000000c
 8000264:	66666667 	.word	0x66666667
 8000268:	20000004 	.word	0x20000004

0800026c <digital_clock>:
//--------------------------
void digital_clock(){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
 // Display the first 7 SEG with led_buffer [0]
	 if(led_buffer[0] == 0){
 8000270:	4bc9      	ldr	r3, [pc, #804]	; (8000598 <digital_clock+0x32c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d122      	bne.n	80002be <digital_clock+0x52>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2102      	movs	r1, #2
 800027c:	48c7      	ldr	r0, [pc, #796]	; (800059c <digital_clock+0x330>)
 800027e:	f001 fbc1 	bl	8001a04 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2104      	movs	r1, #4
 8000286:	48c5      	ldr	r0, [pc, #788]	; (800059c <digital_clock+0x330>)
 8000288:	f001 fbbc 	bl	8001a04 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2108      	movs	r1, #8
 8000290:	48c2      	ldr	r0, [pc, #776]	; (800059c <digital_clock+0x330>)
 8000292:	f001 fbb7 	bl	8001a04 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	2110      	movs	r1, #16
 800029a:	48c0      	ldr	r0, [pc, #768]	; (800059c <digital_clock+0x330>)
 800029c:	f001 fbb2 	bl	8001a04 <HAL_GPIO_WritePin>
 		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2120      	movs	r1, #32
 80002a4:	48bd      	ldr	r0, [pc, #756]	; (800059c <digital_clock+0x330>)
 80002a6:	f001 fbad 	bl	8001a04 <HAL_GPIO_WritePin>
 		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2140      	movs	r1, #64	; 0x40
 80002ae:	48bb      	ldr	r0, [pc, #748]	; (800059c <digital_clock+0x330>)
 80002b0:	f001 fba8 	bl	8001a04 <HAL_GPIO_WritePin>
 		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2180      	movs	r1, #128	; 0x80
 80002b8:	48b8      	ldr	r0, [pc, #736]	; (800059c <digital_clock+0x330>)
 80002ba:	f001 fba3 	bl	8001a04 <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 1){
 80002be:	4bb6      	ldr	r3, [pc, #728]	; (8000598 <digital_clock+0x32c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d122      	bne.n	800030c <digital_clock+0xa0>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2102      	movs	r1, #2
 80002ca:	48b4      	ldr	r0, [pc, #720]	; (800059c <digital_clock+0x330>)
 80002cc:	f001 fb9a 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2104      	movs	r1, #4
 80002d4:	48b1      	ldr	r0, [pc, #708]	; (800059c <digital_clock+0x330>)
 80002d6:	f001 fb95 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2108      	movs	r1, #8
 80002de:	48af      	ldr	r0, [pc, #700]	; (800059c <digital_clock+0x330>)
 80002e0:	f001 fb90 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	2110      	movs	r1, #16
 80002e8:	48ac      	ldr	r0, [pc, #688]	; (800059c <digital_clock+0x330>)
 80002ea:	f001 fb8b 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 80002ee:	2201      	movs	r2, #1
 80002f0:	2120      	movs	r1, #32
 80002f2:	48aa      	ldr	r0, [pc, #680]	; (800059c <digital_clock+0x330>)
 80002f4:	f001 fb86 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	2140      	movs	r1, #64	; 0x40
 80002fc:	48a7      	ldr	r0, [pc, #668]	; (800059c <digital_clock+0x330>)
 80002fe:	f001 fb81 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, SET);;
 8000302:	2201      	movs	r2, #1
 8000304:	2180      	movs	r1, #128	; 0x80
 8000306:	48a5      	ldr	r0, [pc, #660]	; (800059c <digital_clock+0x330>)
 8000308:	f001 fb7c 	bl	8001a04 <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 2){
 800030c:	4ba2      	ldr	r3, [pc, #648]	; (8000598 <digital_clock+0x32c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b02      	cmp	r3, #2
 8000312:	d122      	bne.n	800035a <digital_clock+0xee>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	2102      	movs	r1, #2
 8000318:	48a0      	ldr	r0, [pc, #640]	; (800059c <digital_clock+0x330>)
 800031a:	f001 fb73 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	2104      	movs	r1, #4
 8000322:	489e      	ldr	r0, [pc, #632]	; (800059c <digital_clock+0x330>)
 8000324:	f001 fb6e 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, SET);
 8000328:	2201      	movs	r2, #1
 800032a:	2108      	movs	r1, #8
 800032c:	489b      	ldr	r0, [pc, #620]	; (800059c <digital_clock+0x330>)
 800032e:	f001 fb69 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2110      	movs	r1, #16
 8000336:	4899      	ldr	r0, [pc, #612]	; (800059c <digital_clock+0x330>)
 8000338:	f001 fb64 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2120      	movs	r1, #32
 8000340:	4896      	ldr	r0, [pc, #600]	; (800059c <digital_clock+0x330>)
 8000342:	f001 fb5f 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2140      	movs	r1, #64	; 0x40
 800034a:	4894      	ldr	r0, [pc, #592]	; (800059c <digital_clock+0x330>)
 800034c:	f001 fb5a 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2180      	movs	r1, #128	; 0x80
 8000354:	4891      	ldr	r0, [pc, #580]	; (800059c <digital_clock+0x330>)
 8000356:	f001 fb55 	bl	8001a04 <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 3){
 800035a:	4b8f      	ldr	r3, [pc, #572]	; (8000598 <digital_clock+0x32c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b03      	cmp	r3, #3
 8000360:	d122      	bne.n	80003a8 <digital_clock+0x13c>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	2102      	movs	r1, #2
 8000366:	488d      	ldr	r0, [pc, #564]	; (800059c <digital_clock+0x330>)
 8000368:	f001 fb4c 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2104      	movs	r1, #4
 8000370:	488a      	ldr	r0, [pc, #552]	; (800059c <digital_clock+0x330>)
 8000372:	f001 fb47 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2108      	movs	r1, #8
 800037a:	4888      	ldr	r0, [pc, #544]	; (800059c <digital_clock+0x330>)
 800037c:	f001 fb42 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2110      	movs	r1, #16
 8000384:	4885      	ldr	r0, [pc, #532]	; (800059c <digital_clock+0x330>)
 8000386:	f001 fb3d 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 800038a:	2201      	movs	r2, #1
 800038c:	2120      	movs	r1, #32
 800038e:	4883      	ldr	r0, [pc, #524]	; (800059c <digital_clock+0x330>)
 8000390:	f001 fb38 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 8000394:	2201      	movs	r2, #1
 8000396:	2140      	movs	r1, #64	; 0x40
 8000398:	4880      	ldr	r0, [pc, #512]	; (800059c <digital_clock+0x330>)
 800039a:	f001 fb33 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2180      	movs	r1, #128	; 0x80
 80003a2:	487e      	ldr	r0, [pc, #504]	; (800059c <digital_clock+0x330>)
 80003a4:	f001 fb2e 	bl	8001a04 <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 4){
 80003a8:	4b7b      	ldr	r3, [pc, #492]	; (8000598 <digital_clock+0x32c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b04      	cmp	r3, #4
 80003ae:	d122      	bne.n	80003f6 <digital_clock+0x18a>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	2102      	movs	r1, #2
 80003b4:	4879      	ldr	r0, [pc, #484]	; (800059c <digital_clock+0x330>)
 80003b6:	f001 fb25 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2104      	movs	r1, #4
 80003be:	4877      	ldr	r0, [pc, #476]	; (800059c <digital_clock+0x330>)
 80003c0:	f001 fb20 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2108      	movs	r1, #8
 80003c8:	4874      	ldr	r0, [pc, #464]	; (800059c <digital_clock+0x330>)
 80003ca:	f001 fb1b 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2110      	movs	r1, #16
 80003d2:	4872      	ldr	r0, [pc, #456]	; (800059c <digital_clock+0x330>)
 80003d4:	f001 fb16 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2120      	movs	r1, #32
 80003dc:	486f      	ldr	r0, [pc, #444]	; (800059c <digital_clock+0x330>)
 80003de:	f001 fb11 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2140      	movs	r1, #64	; 0x40
 80003e6:	486d      	ldr	r0, [pc, #436]	; (800059c <digital_clock+0x330>)
 80003e8:	f001 fb0c 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2180      	movs	r1, #128	; 0x80
 80003f0:	486a      	ldr	r0, [pc, #424]	; (800059c <digital_clock+0x330>)
 80003f2:	f001 fb07 	bl	8001a04 <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 5){
 80003f6:	4b68      	ldr	r3, [pc, #416]	; (8000598 <digital_clock+0x32c>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b05      	cmp	r3, #5
 80003fc:	d122      	bne.n	8000444 <digital_clock+0x1d8>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2102      	movs	r1, #2
 8000402:	4866      	ldr	r0, [pc, #408]	; (800059c <digital_clock+0x330>)
 8000404:	f001 fafe 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2104      	movs	r1, #4
 800040c:	4863      	ldr	r0, [pc, #396]	; (800059c <digital_clock+0x330>)
 800040e:	f001 faf9 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	2108      	movs	r1, #8
 8000416:	4861      	ldr	r0, [pc, #388]	; (800059c <digital_clock+0x330>)
 8000418:	f001 faf4 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2110      	movs	r1, #16
 8000420:	485e      	ldr	r0, [pc, #376]	; (800059c <digital_clock+0x330>)
 8000422:	f001 faef 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2120      	movs	r1, #32
 800042a:	485c      	ldr	r0, [pc, #368]	; (800059c <digital_clock+0x330>)
 800042c:	f001 faea 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2140      	movs	r1, #64	; 0x40
 8000434:	4859      	ldr	r0, [pc, #356]	; (800059c <digital_clock+0x330>)
 8000436:	f001 fae5 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2180      	movs	r1, #128	; 0x80
 800043e:	4857      	ldr	r0, [pc, #348]	; (800059c <digital_clock+0x330>)
 8000440:	f001 fae0 	bl	8001a04 <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 6){
 8000444:	4b54      	ldr	r3, [pc, #336]	; (8000598 <digital_clock+0x32c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b06      	cmp	r3, #6
 800044a:	d122      	bne.n	8000492 <digital_clock+0x226>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2102      	movs	r1, #2
 8000450:	4852      	ldr	r0, [pc, #328]	; (800059c <digital_clock+0x330>)
 8000452:	f001 fad7 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, SET);
 8000456:	2201      	movs	r2, #1
 8000458:	2104      	movs	r1, #4
 800045a:	4850      	ldr	r0, [pc, #320]	; (800059c <digital_clock+0x330>)
 800045c:	f001 fad2 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2108      	movs	r1, #8
 8000464:	484d      	ldr	r0, [pc, #308]	; (800059c <digital_clock+0x330>)
 8000466:	f001 facd 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2110      	movs	r1, #16
 800046e:	484b      	ldr	r0, [pc, #300]	; (800059c <digital_clock+0x330>)
 8000470:	f001 fac8 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2120      	movs	r1, #32
 8000478:	4848      	ldr	r0, [pc, #288]	; (800059c <digital_clock+0x330>)
 800047a:	f001 fac3 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2140      	movs	r1, #64	; 0x40
 8000482:	4846      	ldr	r0, [pc, #280]	; (800059c <digital_clock+0x330>)
 8000484:	f001 fabe 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	4843      	ldr	r0, [pc, #268]	; (800059c <digital_clock+0x330>)
 800048e:	f001 fab9 	bl	8001a04 <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 7){
 8000492:	4b41      	ldr	r3, [pc, #260]	; (8000598 <digital_clock+0x32c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b07      	cmp	r3, #7
 8000498:	d122      	bne.n	80004e0 <digital_clock+0x274>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2102      	movs	r1, #2
 800049e:	483f      	ldr	r0, [pc, #252]	; (800059c <digital_clock+0x330>)
 80004a0:	f001 fab0 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2104      	movs	r1, #4
 80004a8:	483c      	ldr	r0, [pc, #240]	; (800059c <digital_clock+0x330>)
 80004aa:	f001 faab 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2108      	movs	r1, #8
 80004b2:	483a      	ldr	r0, [pc, #232]	; (800059c <digital_clock+0x330>)
 80004b4:	f001 faa6 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 80004b8:	2201      	movs	r2, #1
 80004ba:	2110      	movs	r1, #16
 80004bc:	4837      	ldr	r0, [pc, #220]	; (800059c <digital_clock+0x330>)
 80004be:	f001 faa1 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 80004c2:	2201      	movs	r2, #1
 80004c4:	2120      	movs	r1, #32
 80004c6:	4835      	ldr	r0, [pc, #212]	; (800059c <digital_clock+0x330>)
 80004c8:	f001 fa9c 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2140      	movs	r1, #64	; 0x40
 80004d0:	4832      	ldr	r0, [pc, #200]	; (800059c <digital_clock+0x330>)
 80004d2:	f001 fa97 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	4830      	ldr	r0, [pc, #192]	; (800059c <digital_clock+0x330>)
 80004dc:	f001 fa92 	bl	8001a04 <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 8){
 80004e0:	4b2d      	ldr	r3, [pc, #180]	; (8000598 <digital_clock+0x32c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	d122      	bne.n	800052e <digital_clock+0x2c2>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2102      	movs	r1, #2
 80004ec:	482b      	ldr	r0, [pc, #172]	; (800059c <digital_clock+0x330>)
 80004ee:	f001 fa89 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2104      	movs	r1, #4
 80004f6:	4829      	ldr	r0, [pc, #164]	; (800059c <digital_clock+0x330>)
 80004f8:	f001 fa84 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2108      	movs	r1, #8
 8000500:	4826      	ldr	r0, [pc, #152]	; (800059c <digital_clock+0x330>)
 8000502:	f001 fa7f 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2110      	movs	r1, #16
 800050a:	4824      	ldr	r0, [pc, #144]	; (800059c <digital_clock+0x330>)
 800050c:	f001 fa7a 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2120      	movs	r1, #32
 8000514:	4821      	ldr	r0, [pc, #132]	; (800059c <digital_clock+0x330>)
 8000516:	f001 fa75 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2140      	movs	r1, #64	; 0x40
 800051e:	481f      	ldr	r0, [pc, #124]	; (800059c <digital_clock+0x330>)
 8000520:	f001 fa70 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	481c      	ldr	r0, [pc, #112]	; (800059c <digital_clock+0x330>)
 800052a:	f001 fa6b 	bl	8001a04 <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 9){
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <digital_clock+0x32c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b09      	cmp	r3, #9
 8000534:	d122      	bne.n	800057c <digital_clock+0x310>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2102      	movs	r1, #2
 800053a:	4818      	ldr	r0, [pc, #96]	; (800059c <digital_clock+0x330>)
 800053c:	f001 fa62 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2104      	movs	r1, #4
 8000544:	4815      	ldr	r0, [pc, #84]	; (800059c <digital_clock+0x330>)
 8000546:	f001 fa5d 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2108      	movs	r1, #8
 800054e:	4813      	ldr	r0, [pc, #76]	; (800059c <digital_clock+0x330>)
 8000550:	f001 fa58 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2110      	movs	r1, #16
 8000558:	4810      	ldr	r0, [pc, #64]	; (800059c <digital_clock+0x330>)
 800055a:	f001 fa53 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2120      	movs	r1, #32
 8000562:	480e      	ldr	r0, [pc, #56]	; (800059c <digital_clock+0x330>)
 8000564:	f001 fa4e 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	480b      	ldr	r0, [pc, #44]	; (800059c <digital_clock+0x330>)
 800056e:	f001 fa49 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	4809      	ldr	r0, [pc, #36]	; (800059c <digital_clock+0x330>)
 8000578:	f001 fa44 	bl	8001a04 <HAL_GPIO_WritePin>
	 }
 // Display the second 7 SEG with led_buffer [1]
	 if(led_buffer[1] == 0){
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <digital_clock+0x32c>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d12e      	bne.n	80005e2 <digital_clock+0x376>
		 HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <digital_clock+0x330>)
 800058c:	f001 fa3a 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000596:	e003      	b.n	80005a0 <digital_clock+0x334>
 8000598:	2000000c 	.word	0x2000000c
 800059c:	40010800 	.word	0x40010800
 80005a0:	48d0      	ldr	r0, [pc, #832]	; (80008e4 <digital_clock+0x678>)
 80005a2:	f001 fa2f 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ac:	48cd      	ldr	r0, [pc, #820]	; (80008e4 <digital_clock+0x678>)
 80005ae:	f001 fa29 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b8:	48ca      	ldr	r0, [pc, #808]	; (80008e4 <digital_clock+0x678>)
 80005ba:	f001 fa23 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	48c7      	ldr	r0, [pc, #796]	; (80008e4 <digital_clock+0x678>)
 80005c6:	f001 fa1d 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d0:	48c4      	ldr	r0, [pc, #784]	; (80008e4 <digital_clock+0x678>)
 80005d2:	f001 fa17 	bl	8001a04 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005dc:	48c1      	ldr	r0, [pc, #772]	; (80008e4 <digital_clock+0x678>)
 80005de:	f001 fa11 	bl	8001a04 <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 1){
 80005e2:	4bc1      	ldr	r3, [pc, #772]	; (80008e8 <digital_clock+0x67c>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d129      	bne.n	800063e <digital_clock+0x3d2>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	48bc      	ldr	r0, [pc, #752]	; (80008e4 <digital_clock+0x678>)
 80005f2:	f001 fa07 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fc:	48b9      	ldr	r0, [pc, #740]	; (80008e4 <digital_clock+0x678>)
 80005fe:	f001 fa01 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000608:	48b6      	ldr	r0, [pc, #728]	; (80008e4 <digital_clock+0x678>)
 800060a:	f001 f9fb 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000614:	48b3      	ldr	r0, [pc, #716]	; (80008e4 <digital_clock+0x678>)
 8000616:	f001 f9f5 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000620:	48b0      	ldr	r0, [pc, #704]	; (80008e4 <digital_clock+0x678>)
 8000622:	f001 f9ef 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062c:	48ad      	ldr	r0, [pc, #692]	; (80008e4 <digital_clock+0x678>)
 800062e:	f001 f9e9 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, SET);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000638:	48aa      	ldr	r0, [pc, #680]	; (80008e4 <digital_clock+0x678>)
 800063a:	f001 f9e3 	bl	8001a04 <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 2){
 800063e:	4baa      	ldr	r3, [pc, #680]	; (80008e8 <digital_clock+0x67c>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d129      	bne.n	800069a <digital_clock+0x42e>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	48a5      	ldr	r0, [pc, #660]	; (80008e4 <digital_clock+0x678>)
 800064e:	f001 f9d9 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000658:	48a2      	ldr	r0, [pc, #648]	; (80008e4 <digital_clock+0x678>)
 800065a:	f001 f9d3 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000664:	489f      	ldr	r0, [pc, #636]	; (80008e4 <digital_clock+0x678>)
 8000666:	f001 f9cd 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000670:	489c      	ldr	r0, [pc, #624]	; (80008e4 <digital_clock+0x678>)
 8000672:	f001 f9c7 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067c:	4899      	ldr	r0, [pc, #612]	; (80008e4 <digital_clock+0x678>)
 800067e:	f001 f9c1 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000688:	4896      	ldr	r0, [pc, #600]	; (80008e4 <digital_clock+0x678>)
 800068a:	f001 f9bb 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000694:	4893      	ldr	r0, [pc, #588]	; (80008e4 <digital_clock+0x678>)
 8000696:	f001 f9b5 	bl	8001a04 <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 3){
 800069a:	4b93      	ldr	r3, [pc, #588]	; (80008e8 <digital_clock+0x67c>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	2b03      	cmp	r3, #3
 80006a0:	d129      	bne.n	80006f6 <digital_clock+0x48a>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a8:	488e      	ldr	r0, [pc, #568]	; (80008e4 <digital_clock+0x678>)
 80006aa:	f001 f9ab 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b4:	488b      	ldr	r0, [pc, #556]	; (80008e4 <digital_clock+0x678>)
 80006b6:	f001 f9a5 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c0:	4888      	ldr	r0, [pc, #544]	; (80008e4 <digital_clock+0x678>)
 80006c2:	f001 f99f 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006cc:	4885      	ldr	r0, [pc, #532]	; (80008e4 <digital_clock+0x678>)
 80006ce:	f001 f999 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d8:	4882      	ldr	r0, [pc, #520]	; (80008e4 <digital_clock+0x678>)
 80006da:	f001 f993 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e4:	487f      	ldr	r0, [pc, #508]	; (80008e4 <digital_clock+0x678>)
 80006e6:	f001 f98d 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f0:	487c      	ldr	r0, [pc, #496]	; (80008e4 <digital_clock+0x678>)
 80006f2:	f001 f987 	bl	8001a04 <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 4){
 80006f6:	4b7c      	ldr	r3, [pc, #496]	; (80008e8 <digital_clock+0x67c>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d129      	bne.n	8000752 <digital_clock+0x4e6>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000704:	4877      	ldr	r0, [pc, #476]	; (80008e4 <digital_clock+0x678>)
 8000706:	f001 f97d 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000710:	4874      	ldr	r0, [pc, #464]	; (80008e4 <digital_clock+0x678>)
 8000712:	f001 f977 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071c:	4871      	ldr	r0, [pc, #452]	; (80008e4 <digital_clock+0x678>)
 800071e:	f001 f971 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000728:	486e      	ldr	r0, [pc, #440]	; (80008e4 <digital_clock+0x678>)
 800072a:	f001 f96b 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000734:	486b      	ldr	r0, [pc, #428]	; (80008e4 <digital_clock+0x678>)
 8000736:	f001 f965 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000740:	4868      	ldr	r0, [pc, #416]	; (80008e4 <digital_clock+0x678>)
 8000742:	f001 f95f 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074c:	4865      	ldr	r0, [pc, #404]	; (80008e4 <digital_clock+0x678>)
 800074e:	f001 f959 	bl	8001a04 <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 5){
 8000752:	4b65      	ldr	r3, [pc, #404]	; (80008e8 <digital_clock+0x67c>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d129      	bne.n	80007ae <digital_clock+0x542>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	4860      	ldr	r0, [pc, #384]	; (80008e4 <digital_clock+0x678>)
 8000762:	f001 f94f 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076c:	485d      	ldr	r0, [pc, #372]	; (80008e4 <digital_clock+0x678>)
 800076e:	f001 f949 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000778:	485a      	ldr	r0, [pc, #360]	; (80008e4 <digital_clock+0x678>)
 800077a:	f001 f943 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000784:	4857      	ldr	r0, [pc, #348]	; (80008e4 <digital_clock+0x678>)
 8000786:	f001 f93d 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000790:	4854      	ldr	r0, [pc, #336]	; (80008e4 <digital_clock+0x678>)
 8000792:	f001 f937 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079c:	4851      	ldr	r0, [pc, #324]	; (80008e4 <digital_clock+0x678>)
 800079e:	f001 f931 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a8:	484e      	ldr	r0, [pc, #312]	; (80008e4 <digital_clock+0x678>)
 80007aa:	f001 f92b 	bl	8001a04 <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 6){
 80007ae:	4b4e      	ldr	r3, [pc, #312]	; (80008e8 <digital_clock+0x67c>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d129      	bne.n	800080a <digital_clock+0x59e>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007bc:	4849      	ldr	r0, [pc, #292]	; (80008e4 <digital_clock+0x678>)
 80007be:	f001 f921 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c8:	4846      	ldr	r0, [pc, #280]	; (80008e4 <digital_clock+0x678>)
 80007ca:	f001 f91b 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d4:	4843      	ldr	r0, [pc, #268]	; (80008e4 <digital_clock+0x678>)
 80007d6:	f001 f915 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e0:	4840      	ldr	r0, [pc, #256]	; (80008e4 <digital_clock+0x678>)
 80007e2:	f001 f90f 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ec:	483d      	ldr	r0, [pc, #244]	; (80008e4 <digital_clock+0x678>)
 80007ee:	f001 f909 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f8:	483a      	ldr	r0, [pc, #232]	; (80008e4 <digital_clock+0x678>)
 80007fa:	f001 f903 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000804:	4837      	ldr	r0, [pc, #220]	; (80008e4 <digital_clock+0x678>)
 8000806:	f001 f8fd 	bl	8001a04 <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 7){
 800080a:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <digital_clock+0x67c>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b07      	cmp	r3, #7
 8000810:	d129      	bne.n	8000866 <digital_clock+0x5fa>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000818:	4832      	ldr	r0, [pc, #200]	; (80008e4 <digital_clock+0x678>)
 800081a:	f001 f8f3 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	482f      	ldr	r0, [pc, #188]	; (80008e4 <digital_clock+0x678>)
 8000826:	f001 f8ed 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000830:	482c      	ldr	r0, [pc, #176]	; (80008e4 <digital_clock+0x678>)
 8000832:	f001 f8e7 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083c:	4829      	ldr	r0, [pc, #164]	; (80008e4 <digital_clock+0x678>)
 800083e:	f001 f8e1 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000848:	4826      	ldr	r0, [pc, #152]	; (80008e4 <digital_clock+0x678>)
 800084a:	f001 f8db 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000854:	4823      	ldr	r0, [pc, #140]	; (80008e4 <digital_clock+0x678>)
 8000856:	f001 f8d5 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, SET);
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000860:	4820      	ldr	r0, [pc, #128]	; (80008e4 <digital_clock+0x678>)
 8000862:	f001 f8cf 	bl	8001a04 <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 8){
 8000866:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <digital_clock+0x67c>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b08      	cmp	r3, #8
 800086c:	d129      	bne.n	80008c2 <digital_clock+0x656>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000874:	481b      	ldr	r0, [pc, #108]	; (80008e4 <digital_clock+0x678>)
 8000876:	f001 f8c5 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000880:	4818      	ldr	r0, [pc, #96]	; (80008e4 <digital_clock+0x678>)
 8000882:	f001 f8bf 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088c:	4815      	ldr	r0, [pc, #84]	; (80008e4 <digital_clock+0x678>)
 800088e:	f001 f8b9 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000898:	4812      	ldr	r0, [pc, #72]	; (80008e4 <digital_clock+0x678>)
 800089a:	f001 f8b3 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a4:	480f      	ldr	r0, [pc, #60]	; (80008e4 <digital_clock+0x678>)
 80008a6:	f001 f8ad 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <digital_clock+0x678>)
 80008b2:	f001 f8a7 	bl	8001a04 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <digital_clock+0x678>)
 80008be:	f001 f8a1 	bl	8001a04 <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 9){
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <digital_clock+0x67c>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2b09      	cmp	r3, #9
 80008c8:	d12e      	bne.n	8000928 <digital_clock+0x6bc>
	 		 HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <digital_clock+0x678>)
 80008d2:	f001 f897 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008dc:	4801      	ldr	r0, [pc, #4]	; (80008e4 <digital_clock+0x678>)
 80008de:	f001 f891 	bl	8001a04 <HAL_GPIO_WritePin>
 80008e2:	e003      	b.n	80008ec <digital_clock+0x680>
 80008e4:	40010800 	.word	0x40010800
 80008e8:	2000000c 	.word	0x2000000c
	 		 HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f2:	48ca      	ldr	r0, [pc, #808]	; (8000c1c <digital_clock+0x9b0>)
 80008f4:	f001 f886 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fe:	48c7      	ldr	r0, [pc, #796]	; (8000c1c <digital_clock+0x9b0>)
 8000900:	f001 f880 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090a:	48c4      	ldr	r0, [pc, #784]	; (8000c1c <digital_clock+0x9b0>)
 800090c:	f001 f87a 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000916:	48c1      	ldr	r0, [pc, #772]	; (8000c1c <digital_clock+0x9b0>)
 8000918:	f001 f874 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000922:	48be      	ldr	r0, [pc, #760]	; (8000c1c <digital_clock+0x9b0>)
 8000924:	f001 f86e 	bl	8001a04 <HAL_GPIO_WritePin>
	 	 };

 // Display the third 7 SEG with led_buffer [2]
	    	if(led_buffer[2] == 0){
 8000928:	4bbd      	ldr	r3, [pc, #756]	; (8000c20 <digital_clock+0x9b4>)
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d122      	bne.n	8000976 <digital_clock+0x70a>
	    		 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2101      	movs	r1, #1
 8000934:	48bb      	ldr	r0, [pc, #748]	; (8000c24 <digital_clock+0x9b8>)
 8000936:	f001 f865 	bl	8001a04 <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2102      	movs	r1, #2
 800093e:	48b9      	ldr	r0, [pc, #740]	; (8000c24 <digital_clock+0x9b8>)
 8000940:	f001 f860 	bl	8001a04 <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2104      	movs	r1, #4
 8000948:	48b6      	ldr	r0, [pc, #728]	; (8000c24 <digital_clock+0x9b8>)
 800094a:	f001 f85b 	bl	8001a04 <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	48b4      	ldr	r0, [pc, #720]	; (8000c24 <digital_clock+0x9b8>)
 8000954:	f001 f856 	bl	8001a04 <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2110      	movs	r1, #16
 800095c:	48b1      	ldr	r0, [pc, #708]	; (8000c24 <digital_clock+0x9b8>)
 800095e:	f001 f851 	bl	8001a04 <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2120      	movs	r1, #32
 8000966:	48af      	ldr	r0, [pc, #700]	; (8000c24 <digital_clock+0x9b8>)
 8000968:	f001 f84c 	bl	8001a04 <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2140      	movs	r1, #64	; 0x40
 8000970:	48ac      	ldr	r0, [pc, #688]	; (8000c24 <digital_clock+0x9b8>)
 8000972:	f001 f847 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 1){
 8000976:	4baa      	ldr	r3, [pc, #680]	; (8000c20 <digital_clock+0x9b4>)
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d122      	bne.n	80009c4 <digital_clock+0x758>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2101      	movs	r1, #1
 8000982:	48a8      	ldr	r0, [pc, #672]	; (8000c24 <digital_clock+0x9b8>)
 8000984:	f001 f83e 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2102      	movs	r1, #2
 800098c:	48a5      	ldr	r0, [pc, #660]	; (8000c24 <digital_clock+0x9b8>)
 800098e:	f001 f839 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2104      	movs	r1, #4
 8000996:	48a3      	ldr	r0, [pc, #652]	; (8000c24 <digital_clock+0x9b8>)
 8000998:	f001 f834 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2108      	movs	r1, #8
 80009a0:	48a0      	ldr	r0, [pc, #640]	; (8000c24 <digital_clock+0x9b8>)
 80009a2:	f001 f82f 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2110      	movs	r1, #16
 80009aa:	489e      	ldr	r0, [pc, #632]	; (8000c24 <digital_clock+0x9b8>)
 80009ac:	f001 f82a 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2120      	movs	r1, #32
 80009b4:	489b      	ldr	r0, [pc, #620]	; (8000c24 <digital_clock+0x9b8>)
 80009b6:	f001 f825 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2140      	movs	r1, #64	; 0x40
 80009be:	4899      	ldr	r0, [pc, #612]	; (8000c24 <digital_clock+0x9b8>)
 80009c0:	f001 f820 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 2){
 80009c4:	4b96      	ldr	r3, [pc, #600]	; (8000c20 <digital_clock+0x9b4>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d122      	bne.n	8000a12 <digital_clock+0x7a6>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2101      	movs	r1, #1
 80009d0:	4894      	ldr	r0, [pc, #592]	; (8000c24 <digital_clock+0x9b8>)
 80009d2:	f001 f817 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2102      	movs	r1, #2
 80009da:	4892      	ldr	r0, [pc, #584]	; (8000c24 <digital_clock+0x9b8>)
 80009dc:	f001 f812 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2104      	movs	r1, #4
 80009e4:	488f      	ldr	r0, [pc, #572]	; (8000c24 <digital_clock+0x9b8>)
 80009e6:	f001 f80d 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2108      	movs	r1, #8
 80009ee:	488d      	ldr	r0, [pc, #564]	; (8000c24 <digital_clock+0x9b8>)
 80009f0:	f001 f808 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2110      	movs	r1, #16
 80009f8:	488a      	ldr	r0, [pc, #552]	; (8000c24 <digital_clock+0x9b8>)
 80009fa:	f001 f803 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2120      	movs	r1, #32
 8000a02:	4888      	ldr	r0, [pc, #544]	; (8000c24 <digital_clock+0x9b8>)
 8000a04:	f000 fffe 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	4885      	ldr	r0, [pc, #532]	; (8000c24 <digital_clock+0x9b8>)
 8000a0e:	f000 fff9 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 3){
 8000a12:	4b83      	ldr	r3, [pc, #524]	; (8000c20 <digital_clock+0x9b4>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d122      	bne.n	8000a60 <digital_clock+0x7f4>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4881      	ldr	r0, [pc, #516]	; (8000c24 <digital_clock+0x9b8>)
 8000a20:	f000 fff0 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2102      	movs	r1, #2
 8000a28:	487e      	ldr	r0, [pc, #504]	; (8000c24 <digital_clock+0x9b8>)
 8000a2a:	f000 ffeb 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2104      	movs	r1, #4
 8000a32:	487c      	ldr	r0, [pc, #496]	; (8000c24 <digital_clock+0x9b8>)
 8000a34:	f000 ffe6 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2108      	movs	r1, #8
 8000a3c:	4879      	ldr	r0, [pc, #484]	; (8000c24 <digital_clock+0x9b8>)
 8000a3e:	f000 ffe1 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2110      	movs	r1, #16
 8000a46:	4877      	ldr	r0, [pc, #476]	; (8000c24 <digital_clock+0x9b8>)
 8000a48:	f000 ffdc 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2120      	movs	r1, #32
 8000a50:	4874      	ldr	r0, [pc, #464]	; (8000c24 <digital_clock+0x9b8>)
 8000a52:	f000 ffd7 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2140      	movs	r1, #64	; 0x40
 8000a5a:	4872      	ldr	r0, [pc, #456]	; (8000c24 <digital_clock+0x9b8>)
 8000a5c:	f000 ffd2 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 4){
 8000a60:	4b6f      	ldr	r3, [pc, #444]	; (8000c20 <digital_clock+0x9b4>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d122      	bne.n	8000aae <digital_clock+0x842>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	486d      	ldr	r0, [pc, #436]	; (8000c24 <digital_clock+0x9b8>)
 8000a6e:	f000 ffc9 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2102      	movs	r1, #2
 8000a76:	486b      	ldr	r0, [pc, #428]	; (8000c24 <digital_clock+0x9b8>)
 8000a78:	f000 ffc4 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2104      	movs	r1, #4
 8000a80:	4868      	ldr	r0, [pc, #416]	; (8000c24 <digital_clock+0x9b8>)
 8000a82:	f000 ffbf 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	2108      	movs	r1, #8
 8000a8a:	4866      	ldr	r0, [pc, #408]	; (8000c24 <digital_clock+0x9b8>)
 8000a8c:	f000 ffba 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2110      	movs	r1, #16
 8000a94:	4863      	ldr	r0, [pc, #396]	; (8000c24 <digital_clock+0x9b8>)
 8000a96:	f000 ffb5 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	4861      	ldr	r0, [pc, #388]	; (8000c24 <digital_clock+0x9b8>)
 8000aa0:	f000 ffb0 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	485e      	ldr	r0, [pc, #376]	; (8000c24 <digital_clock+0x9b8>)
 8000aaa:	f000 ffab 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 5){
 8000aae:	4b5c      	ldr	r3, [pc, #368]	; (8000c20 <digital_clock+0x9b4>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	2b05      	cmp	r3, #5
 8000ab4:	d122      	bne.n	8000afc <digital_clock+0x890>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2101      	movs	r1, #1
 8000aba:	485a      	ldr	r0, [pc, #360]	; (8000c24 <digital_clock+0x9b8>)
 8000abc:	f000 ffa2 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	4857      	ldr	r0, [pc, #348]	; (8000c24 <digital_clock+0x9b8>)
 8000ac6:	f000 ff9d 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2104      	movs	r1, #4
 8000ace:	4855      	ldr	r0, [pc, #340]	; (8000c24 <digital_clock+0x9b8>)
 8000ad0:	f000 ff98 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2108      	movs	r1, #8
 8000ad8:	4852      	ldr	r0, [pc, #328]	; (8000c24 <digital_clock+0x9b8>)
 8000ada:	f000 ff93 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	4850      	ldr	r0, [pc, #320]	; (8000c24 <digital_clock+0x9b8>)
 8000ae4:	f000 ff8e 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2120      	movs	r1, #32
 8000aec:	484d      	ldr	r0, [pc, #308]	; (8000c24 <digital_clock+0x9b8>)
 8000aee:	f000 ff89 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2140      	movs	r1, #64	; 0x40
 8000af6:	484b      	ldr	r0, [pc, #300]	; (8000c24 <digital_clock+0x9b8>)
 8000af8:	f000 ff84 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 6){
 8000afc:	4b48      	ldr	r3, [pc, #288]	; (8000c20 <digital_clock+0x9b4>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2b06      	cmp	r3, #6
 8000b02:	d122      	bne.n	8000b4a <digital_clock+0x8de>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2101      	movs	r1, #1
 8000b08:	4846      	ldr	r0, [pc, #280]	; (8000c24 <digital_clock+0x9b8>)
 8000b0a:	f000 ff7b 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2102      	movs	r1, #2
 8000b12:	4844      	ldr	r0, [pc, #272]	; (8000c24 <digital_clock+0x9b8>)
 8000b14:	f000 ff76 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	4841      	ldr	r0, [pc, #260]	; (8000c24 <digital_clock+0x9b8>)
 8000b1e:	f000 ff71 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2108      	movs	r1, #8
 8000b26:	483f      	ldr	r0, [pc, #252]	; (8000c24 <digital_clock+0x9b8>)
 8000b28:	f000 ff6c 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2110      	movs	r1, #16
 8000b30:	483c      	ldr	r0, [pc, #240]	; (8000c24 <digital_clock+0x9b8>)
 8000b32:	f000 ff67 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2120      	movs	r1, #32
 8000b3a:	483a      	ldr	r0, [pc, #232]	; (8000c24 <digital_clock+0x9b8>)
 8000b3c:	f000 ff62 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2140      	movs	r1, #64	; 0x40
 8000b44:	4837      	ldr	r0, [pc, #220]	; (8000c24 <digital_clock+0x9b8>)
 8000b46:	f000 ff5d 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 7){
 8000b4a:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <digital_clock+0x9b4>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2b07      	cmp	r3, #7
 8000b50:	d122      	bne.n	8000b98 <digital_clock+0x92c>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2101      	movs	r1, #1
 8000b56:	4833      	ldr	r0, [pc, #204]	; (8000c24 <digital_clock+0x9b8>)
 8000b58:	f000 ff54 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2102      	movs	r1, #2
 8000b60:	4830      	ldr	r0, [pc, #192]	; (8000c24 <digital_clock+0x9b8>)
 8000b62:	f000 ff4f 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2104      	movs	r1, #4
 8000b6a:	482e      	ldr	r0, [pc, #184]	; (8000c24 <digital_clock+0x9b8>)
 8000b6c:	f000 ff4a 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2108      	movs	r1, #8
 8000b74:	482b      	ldr	r0, [pc, #172]	; (8000c24 <digital_clock+0x9b8>)
 8000b76:	f000 ff45 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	4829      	ldr	r0, [pc, #164]	; (8000c24 <digital_clock+0x9b8>)
 8000b80:	f000 ff40 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2120      	movs	r1, #32
 8000b88:	4826      	ldr	r0, [pc, #152]	; (8000c24 <digital_clock+0x9b8>)
 8000b8a:	f000 ff3b 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2140      	movs	r1, #64	; 0x40
 8000b92:	4824      	ldr	r0, [pc, #144]	; (8000c24 <digital_clock+0x9b8>)
 8000b94:	f000 ff36 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 8){
 8000b98:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <digital_clock+0x9b4>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	2b08      	cmp	r3, #8
 8000b9e:	d122      	bne.n	8000be6 <digital_clock+0x97a>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	481f      	ldr	r0, [pc, #124]	; (8000c24 <digital_clock+0x9b8>)
 8000ba6:	f000 ff2d 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2102      	movs	r1, #2
 8000bae:	481d      	ldr	r0, [pc, #116]	; (8000c24 <digital_clock+0x9b8>)
 8000bb0:	f000 ff28 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	481a      	ldr	r0, [pc, #104]	; (8000c24 <digital_clock+0x9b8>)
 8000bba:	f000 ff23 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	4818      	ldr	r0, [pc, #96]	; (8000c24 <digital_clock+0x9b8>)
 8000bc4:	f000 ff1e 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4815      	ldr	r0, [pc, #84]	; (8000c24 <digital_clock+0x9b8>)
 8000bce:	f000 ff19 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	4813      	ldr	r0, [pc, #76]	; (8000c24 <digital_clock+0x9b8>)
 8000bd8:	f000 ff14 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2140      	movs	r1, #64	; 0x40
 8000be0:	4810      	ldr	r0, [pc, #64]	; (8000c24 <digital_clock+0x9b8>)
 8000be2:	f000 ff0f 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 9){
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <digital_clock+0x9b4>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	2b09      	cmp	r3, #9
 8000bec:	d129      	bne.n	8000c42 <digital_clock+0x9d6>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	480c      	ldr	r0, [pc, #48]	; (8000c24 <digital_clock+0x9b8>)
 8000bf4:	f000 ff06 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <digital_clock+0x9b8>)
 8000bfe:	f000 ff01 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2104      	movs	r1, #4
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <digital_clock+0x9b8>)
 8000c08:	f000 fefc 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2108      	movs	r1, #8
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <digital_clock+0x9b8>)
 8000c12:	f000 fef7 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2110      	movs	r1, #16
 8000c1a:	e005      	b.n	8000c28 <digital_clock+0x9bc>
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	2000000c 	.word	0x2000000c
 8000c24:	40010c00 	.word	0x40010c00
 8000c28:	48cf      	ldr	r0, [pc, #828]	; (8000f68 <digital_clock+0xcfc>)
 8000c2a:	f000 feeb 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2120      	movs	r1, #32
 8000c32:	48cd      	ldr	r0, [pc, #820]	; (8000f68 <digital_clock+0xcfc>)
 8000c34:	f000 fee6 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2140      	movs	r1, #64	; 0x40
 8000c3c:	48ca      	ldr	r0, [pc, #808]	; (8000f68 <digital_clock+0xcfc>)
 8000c3e:	f000 fee1 	bl	8001a04 <HAL_GPIO_WritePin>
	 		 }

 // Display the forth 7 SEG with led_buffer [3]
	 		if(led_buffer[3] == 0){
 8000c42:	4bca      	ldr	r3, [pc, #808]	; (8000f6c <digital_clock+0xd00>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d128      	bne.n	8000c9c <digital_clock+0xa30>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	48c6      	ldr	r0, [pc, #792]	; (8000f68 <digital_clock+0xcfc>)
 8000c50:	f000 fed8 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5a:	48c3      	ldr	r0, [pc, #780]	; (8000f68 <digital_clock+0xcfc>)
 8000c5c:	f000 fed2 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c66:	48c0      	ldr	r0, [pc, #768]	; (8000f68 <digital_clock+0xcfc>)
 8000c68:	f000 fecc 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c72:	48bd      	ldr	r0, [pc, #756]	; (8000f68 <digital_clock+0xcfc>)
 8000c74:	f000 fec6 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c7e:	48ba      	ldr	r0, [pc, #744]	; (8000f68 <digital_clock+0xcfc>)
 8000c80:	f000 fec0 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8a:	48b7      	ldr	r0, [pc, #732]	; (8000f68 <digital_clock+0xcfc>)
 8000c8c:	f000 feba 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c96:	48b4      	ldr	r0, [pc, #720]	; (8000f68 <digital_clock+0xcfc>)
 8000c98:	f000 feb4 	bl	8001a04 <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 1){
 8000c9c:	4bb3      	ldr	r3, [pc, #716]	; (8000f6c <digital_clock+0xd00>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d128      	bne.n	8000cf6 <digital_clock+0xa8a>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	48af      	ldr	r0, [pc, #700]	; (8000f68 <digital_clock+0xcfc>)
 8000caa:	f000 feab 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb4:	48ac      	ldr	r0, [pc, #688]	; (8000f68 <digital_clock+0xcfc>)
 8000cb6:	f000 fea5 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc0:	48a9      	ldr	r0, [pc, #676]	; (8000f68 <digital_clock+0xcfc>)
 8000cc2:	f000 fe9f 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ccc:	48a6      	ldr	r0, [pc, #664]	; (8000f68 <digital_clock+0xcfc>)
 8000cce:	f000 fe99 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd8:	48a3      	ldr	r0, [pc, #652]	; (8000f68 <digital_clock+0xcfc>)
 8000cda:	f000 fe93 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce4:	48a0      	ldr	r0, [pc, #640]	; (8000f68 <digital_clock+0xcfc>)
 8000ce6:	f000 fe8d 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf0:	489d      	ldr	r0, [pc, #628]	; (8000f68 <digital_clock+0xcfc>)
 8000cf2:	f000 fe87 	bl	8001a04 <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 2){
 8000cf6:	4b9d      	ldr	r3, [pc, #628]	; (8000f6c <digital_clock+0xd00>)
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d128      	bne.n	8000d50 <digital_clock+0xae4>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	4899      	ldr	r0, [pc, #612]	; (8000f68 <digital_clock+0xcfc>)
 8000d04:	f000 fe7e 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0e:	4896      	ldr	r0, [pc, #600]	; (8000f68 <digital_clock+0xcfc>)
 8000d10:	f000 fe78 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1a:	4893      	ldr	r0, [pc, #588]	; (8000f68 <digital_clock+0xcfc>)
 8000d1c:	f000 fe72 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d26:	4890      	ldr	r0, [pc, #576]	; (8000f68 <digital_clock+0xcfc>)
 8000d28:	f000 fe6c 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d32:	488d      	ldr	r0, [pc, #564]	; (8000f68 <digital_clock+0xcfc>)
 8000d34:	f000 fe66 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3e:	488a      	ldr	r0, [pc, #552]	; (8000f68 <digital_clock+0xcfc>)
 8000d40:	f000 fe60 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4a:	4887      	ldr	r0, [pc, #540]	; (8000f68 <digital_clock+0xcfc>)
 8000d4c:	f000 fe5a 	bl	8001a04 <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 3){
 8000d50:	4b86      	ldr	r3, [pc, #536]	; (8000f6c <digital_clock+0xd00>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d128      	bne.n	8000daa <digital_clock+0xb3e>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2180      	movs	r1, #128	; 0x80
 8000d5c:	4882      	ldr	r0, [pc, #520]	; (8000f68 <digital_clock+0xcfc>)
 8000d5e:	f000 fe51 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d68:	487f      	ldr	r0, [pc, #508]	; (8000f68 <digital_clock+0xcfc>)
 8000d6a:	f000 fe4b 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d74:	487c      	ldr	r0, [pc, #496]	; (8000f68 <digital_clock+0xcfc>)
 8000d76:	f000 fe45 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d80:	4879      	ldr	r0, [pc, #484]	; (8000f68 <digital_clock+0xcfc>)
 8000d82:	f000 fe3f 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8c:	4876      	ldr	r0, [pc, #472]	; (8000f68 <digital_clock+0xcfc>)
 8000d8e:	f000 fe39 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	4873      	ldr	r0, [pc, #460]	; (8000f68 <digital_clock+0xcfc>)
 8000d9a:	f000 fe33 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da4:	4870      	ldr	r0, [pc, #448]	; (8000f68 <digital_clock+0xcfc>)
 8000da6:	f000 fe2d 	bl	8001a04 <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 4){
 8000daa:	4b70      	ldr	r3, [pc, #448]	; (8000f6c <digital_clock+0xd00>)
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	d128      	bne.n	8000e04 <digital_clock+0xb98>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	486c      	ldr	r0, [pc, #432]	; (8000f68 <digital_clock+0xcfc>)
 8000db8:	f000 fe24 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc2:	4869      	ldr	r0, [pc, #420]	; (8000f68 <digital_clock+0xcfc>)
 8000dc4:	f000 fe1e 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dce:	4866      	ldr	r0, [pc, #408]	; (8000f68 <digital_clock+0xcfc>)
 8000dd0:	f000 fe18 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dda:	4863      	ldr	r0, [pc, #396]	; (8000f68 <digital_clock+0xcfc>)
 8000ddc:	f000 fe12 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de6:	4860      	ldr	r0, [pc, #384]	; (8000f68 <digital_clock+0xcfc>)
 8000de8:	f000 fe0c 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df2:	485d      	ldr	r0, [pc, #372]	; (8000f68 <digital_clock+0xcfc>)
 8000df4:	f000 fe06 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfe:	485a      	ldr	r0, [pc, #360]	; (8000f68 <digital_clock+0xcfc>)
 8000e00:	f000 fe00 	bl	8001a04 <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 5){
 8000e04:	4b59      	ldr	r3, [pc, #356]	; (8000f6c <digital_clock+0xd00>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	2b05      	cmp	r3, #5
 8000e0a:	d128      	bne.n	8000e5e <digital_clock+0xbf2>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	4855      	ldr	r0, [pc, #340]	; (8000f68 <digital_clock+0xcfc>)
 8000e12:	f000 fdf7 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4852      	ldr	r0, [pc, #328]	; (8000f68 <digital_clock+0xcfc>)
 8000e1e:	f000 fdf1 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e28:	484f      	ldr	r0, [pc, #316]	; (8000f68 <digital_clock+0xcfc>)
 8000e2a:	f000 fdeb 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e34:	484c      	ldr	r0, [pc, #304]	; (8000f68 <digital_clock+0xcfc>)
 8000e36:	f000 fde5 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e40:	4849      	ldr	r0, [pc, #292]	; (8000f68 <digital_clock+0xcfc>)
 8000e42:	f000 fddf 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4c:	4846      	ldr	r0, [pc, #280]	; (8000f68 <digital_clock+0xcfc>)
 8000e4e:	f000 fdd9 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e58:	4843      	ldr	r0, [pc, #268]	; (8000f68 <digital_clock+0xcfc>)
 8000e5a:	f000 fdd3 	bl	8001a04 <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 6){
 8000e5e:	4b43      	ldr	r3, [pc, #268]	; (8000f6c <digital_clock+0xd00>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d128      	bne.n	8000eb8 <digital_clock+0xc4c>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	483f      	ldr	r0, [pc, #252]	; (8000f68 <digital_clock+0xcfc>)
 8000e6c:	f000 fdca 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e76:	483c      	ldr	r0, [pc, #240]	; (8000f68 <digital_clock+0xcfc>)
 8000e78:	f000 fdc4 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e82:	4839      	ldr	r0, [pc, #228]	; (8000f68 <digital_clock+0xcfc>)
 8000e84:	f000 fdbe 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8e:	4836      	ldr	r0, [pc, #216]	; (8000f68 <digital_clock+0xcfc>)
 8000e90:	f000 fdb8 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e9a:	4833      	ldr	r0, [pc, #204]	; (8000f68 <digital_clock+0xcfc>)
 8000e9c:	f000 fdb2 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea6:	4830      	ldr	r0, [pc, #192]	; (8000f68 <digital_clock+0xcfc>)
 8000ea8:	f000 fdac 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb2:	482d      	ldr	r0, [pc, #180]	; (8000f68 <digital_clock+0xcfc>)
 8000eb4:	f000 fda6 	bl	8001a04 <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 7){
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <digital_clock+0xd00>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	2b07      	cmp	r3, #7
 8000ebe:	d128      	bne.n	8000f12 <digital_clock+0xca6>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4828      	ldr	r0, [pc, #160]	; (8000f68 <digital_clock+0xcfc>)
 8000ec6:	f000 fd9d 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed0:	4825      	ldr	r0, [pc, #148]	; (8000f68 <digital_clock+0xcfc>)
 8000ed2:	f000 fd97 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000edc:	4822      	ldr	r0, [pc, #136]	; (8000f68 <digital_clock+0xcfc>)
 8000ede:	f000 fd91 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee8:	481f      	ldr	r0, [pc, #124]	; (8000f68 <digital_clock+0xcfc>)
 8000eea:	f000 fd8b 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef4:	481c      	ldr	r0, [pc, #112]	; (8000f68 <digital_clock+0xcfc>)
 8000ef6:	f000 fd85 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f00:	4819      	ldr	r0, [pc, #100]	; (8000f68 <digital_clock+0xcfc>)
 8000f02:	f000 fd7f 	bl	8001a04 <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0c:	4816      	ldr	r0, [pc, #88]	; (8000f68 <digital_clock+0xcfc>)
 8000f0e:	f000 fd79 	bl	8001a04 <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 8){
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <digital_clock+0xd00>)
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d12d      	bne.n	8000f76 <digital_clock+0xd0a>
	 			HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	4812      	ldr	r0, [pc, #72]	; (8000f68 <digital_clock+0xcfc>)
 8000f20:	f000 fd70 	bl	8001a04 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2a:	480f      	ldr	r0, [pc, #60]	; (8000f68 <digital_clock+0xcfc>)
 8000f2c:	f000 fd6a 	bl	8001a04 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f36:	480c      	ldr	r0, [pc, #48]	; (8000f68 <digital_clock+0xcfc>)
 8000f38:	f000 fd64 	bl	8001a04 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f42:	4809      	ldr	r0, [pc, #36]	; (8000f68 <digital_clock+0xcfc>)
 8000f44:	f000 fd5e 	bl	8001a04 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <digital_clock+0xcfc>)
 8000f50:	f000 fd58 	bl	8001a04 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5a:	4803      	ldr	r0, [pc, #12]	; (8000f68 <digital_clock+0xcfc>)
 8000f5c:	f000 fd52 	bl	8001a04 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f66:	e003      	b.n	8000f70 <digital_clock+0xd04>
 8000f68:	40010c00 	.word	0x40010c00
 8000f6c:	2000000c 	.word	0x2000000c
 8000f70:	4818      	ldr	r0, [pc, #96]	; (8000fd4 <digital_clock+0xd68>)
 8000f72:	f000 fd47 	bl	8001a04 <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 9){
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <digital_clock+0xd6c>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b09      	cmp	r3, #9
 8000f7c:	d128      	bne.n	8000fd0 <digital_clock+0xd64>
	 			HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <digital_clock+0xd68>)
 8000f84:	f000 fd3e 	bl	8001a04 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8e:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <digital_clock+0xd68>)
 8000f90:	f000 fd38 	bl	8001a04 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9a:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <digital_clock+0xd68>)
 8000f9c:	f000 fd32 	bl	8001a04 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa6:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <digital_clock+0xd68>)
 8000fa8:	f000 fd2c 	bl	8001a04 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb2:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <digital_clock+0xd68>)
 8000fb4:	f000 fd26 	bl	8001a04 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <digital_clock+0xd68>)
 8000fc0:	f000 fd20 	bl	8001a04 <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fca:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <digital_clock+0xd68>)
 8000fcc:	f000 fd1a 	bl	8001a04 <HAL_GPIO_WritePin>
	 		}
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40010c00 	.word	0x40010c00
 8000fd8:	2000000c 	.word	0x2000000c

08000fdc <main>:
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe0:	f000 fa26 	bl	8001430 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe4:	f000 f84e 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe8:	f000 f8d4 	bl	8001194 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fec:	f000 f886 	bl	80010fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000ff0:	481e      	ldr	r0, [pc, #120]	; (800106c <main+0x90>)
 8000ff2:	f001 f971 	bl	80022d8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
//  setTimer0(1000);
  while (1)
  {
    /* USER CODE END WHILE */
	  if( timer0_flag == 1) {
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <main+0x94>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d108      	bne.n	8001010 <main+0x34>
	  		  HAL_GPIO_TogglePin( LED_RED_GPIO_Port , LED_RED_Pin ) ;
 8000ffe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001002:	481c      	ldr	r0, [pc, #112]	; (8001074 <main+0x98>)
 8001004:	f000 fd16 	bl	8001a34 <HAL_GPIO_TogglePin>
	  		  setTimer0(2000);
 8001008:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800100c:	f000 f928 	bl	8001260 <setTimer0>
	  	  }
	  	  second ++;
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <main+0x9c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	4a18      	ldr	r2, [pc, #96]	; (8001078 <main+0x9c>)
 8001018:	6013      	str	r3, [r2, #0]
	  	  if ( second >= 60) {
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <main+0x9c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b3b      	cmp	r3, #59	; 0x3b
 8001020:	dd07      	ble.n	8001032 <main+0x56>
	  		  second = 0;
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <main+0x9c>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
	  		  minute ++;
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <main+0xa0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <main+0xa0>)
 8001030:	6013      	str	r3, [r2, #0]
	  	  }
	  	  if( minute >= 60) {
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <main+0xa0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b3b      	cmp	r3, #59	; 0x3b
 8001038:	dd07      	ble.n	800104a <main+0x6e>
	  		  minute = 0;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <main+0xa0>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
	  		  hour ++;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <main+0xa4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <main+0xa4>)
 8001048:	6013      	str	r3, [r2, #0]
	  	  }
	  	  if( hour >=24) {
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <main+0xa4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b17      	cmp	r3, #23
 8001050:	dd02      	ble.n	8001058 <main+0x7c>
	  		  hour = 0;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <main+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	  	  }
	  	  updateClockBuffer () ;
 8001058:	f7ff f878 	bl	800014c <updateClockBuffer>
	  	  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 800105c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <main+0x98>)
 8001062:	f000 fce7 	bl	8001a34 <HAL_GPIO_TogglePin>
	  	  digital_clock();
 8001066:	f7ff f901 	bl	800026c <digital_clock>
	  if( timer0_flag == 1) {
 800106a:	e7c4      	b.n	8000ff6 <main+0x1a>
 800106c:	20000050 	.word	0x20000050
 8001070:	2000004c 	.word	0x2000004c
 8001074:	40010c00 	.word	0x40010c00
 8001078:	20000008 	.word	0x20000008
 800107c:	20000004 	.word	0x20000004
 8001080:	20000000 	.word	0x20000000

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b090      	sub	sp, #64	; 0x40
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	2228      	movs	r2, #40	; 0x28
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fcd8 	bl	8002a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010aa:	2301      	movs	r3, #1
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ae:	2310      	movs	r3, #16
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fcd4 	bl	8001a68 <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010c6:	f000 f8c5 	bl	8001254 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 ff40 	bl	8001f68 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010ee:	f000 f8b1 	bl	8001254 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3740      	adds	r7, #64	; 0x40
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_TIM2_Init+0x94>)
 800111a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_TIM2_Init+0x94>)
 8001122:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001126:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_TIM2_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_TIM2_Init+0x94>)
 8001130:	2209      	movs	r2, #9
 8001132:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_TIM2_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_TIM2_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_TIM2_Init+0x94>)
 8001142:	f001 f879 	bl	8002238 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800114c:	f000 f882 	bl	8001254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_TIM2_Init+0x94>)
 800115e:	f001 fa0f 	bl	8002580 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001168:	f000 f874 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_TIM2_Init+0x94>)
 800117a:	f001 fbd7 	bl	800292c <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001184:	f000 f866 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000050 	.word	0x20000050

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <MX_GPIO_Init+0xa0>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a21      	ldr	r2, [pc, #132]	; (8001234 <MX_GPIO_Init+0xa0>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_GPIO_Init+0xa0>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_GPIO_Init+0xa0>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <MX_GPIO_Init+0xa0>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_GPIO_Init+0xa0>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG1_A_Pin|SEG1_B_Pin|SEG1_C_Pin|SEG1_D_Pin
 80011d8:	2200      	movs	r2, #0
 80011da:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80011de:	4816      	ldr	r0, [pc, #88]	; (8001238 <MX_GPIO_Init+0xa4>)
 80011e0:	f000 fc10 	bl	8001a04 <HAL_GPIO_WritePin>
                          |SEG1_E_Pin|SEG1_F_Pin|SEG1_G_Pin|SEG2_A_Pin
                          |SEG2_B_Pin|SEG2_C_Pin|SEG2_D_Pin|SEG2_E_Pin
                          |SEG2_F_Pin|SEG2_G_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG3_A_Pin|SEG3_B_Pin|SEG3_C_Pin|SEG4_D_Pin
 80011e4:	2200      	movs	r2, #0
 80011e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011ea:	4814      	ldr	r0, [pc, #80]	; (800123c <MX_GPIO_Init+0xa8>)
 80011ec:	f000 fc0a 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG1_A_Pin SEG1_B_Pin SEG1_C_Pin SEG1_D_Pin
                           SEG1_E_Pin SEG1_F_Pin SEG1_G_Pin SEG2_A_Pin
                           SEG2_B_Pin SEG2_C_Pin SEG2_D_Pin SEG2_E_Pin
                           SEG2_F_Pin SEG2_G_Pin EN_Pin */
  GPIO_InitStruct.Pin = SEG1_A_Pin|SEG1_B_Pin|SEG1_C_Pin|SEG1_D_Pin
 80011f0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80011f4:	60bb      	str	r3, [r7, #8]
                          |SEG1_E_Pin|SEG1_F_Pin|SEG1_G_Pin|SEG2_A_Pin
                          |SEG2_B_Pin|SEG2_C_Pin|SEG2_D_Pin|SEG2_E_Pin
                          |SEG2_F_Pin|SEG2_G_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2302      	movs	r3, #2
 8001200:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	4619      	mov	r1, r3
 8001208:	480b      	ldr	r0, [pc, #44]	; (8001238 <MX_GPIO_Init+0xa4>)
 800120a:	f000 fa81 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG3_A_Pin SEG3_B_Pin SEG3_C_Pin SEG4_D_Pin
                           SEG4_E_Pin SEG4_F_Pin SEG4_G_Pin LED_RED_Pin
                           DOT_Pin SEG3_D_Pin SEG3_E_Pin SEG3_F_Pin
                           SEG3_G_Pin SEG4_A_Pin SEG4_B_Pin SEG4_C_Pin */
  GPIO_InitStruct.Pin = SEG3_A_Pin|SEG3_B_Pin|SEG3_C_Pin|SEG4_D_Pin
 800120e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001212:	60bb      	str	r3, [r7, #8]
                          |SEG4_E_Pin|SEG4_F_Pin|SEG4_G_Pin|LED_RED_Pin
                          |DOT_Pin|SEG3_D_Pin|SEG3_E_Pin|SEG3_F_Pin
                          |SEG3_G_Pin|SEG4_A_Pin|SEG4_B_Pin|SEG4_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2302      	movs	r3, #2
 800121e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	4619      	mov	r1, r3
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_GPIO_Init+0xa8>)
 8001228:	f000 fa72 	bl	8001710 <HAL_GPIO_Init>

}
 800122c:	bf00      	nop
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000
 8001238:	40010800 	.word	0x40010800
 800123c:	40010c00 	.word	0x40010c00

08001240 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef * htim )
 {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	 timer_run();
 8001248:	f000 f824 	bl	8001294 <timer_run>
 }
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
}
 800125a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125c:	e7fe      	b.n	800125c <Error_Handler+0x8>
	...

08001260 <setTimer0>:
 */
#include "software_timer.h"
 int timer0_counter = 0;
 int timer0_flag = 0;
 int TIMER_CYCLE = 10;
 void setTimer0 ( int duration ) {
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	 timer0_counter = duration / TIMER_CYCLE ;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <setTimer0+0x28>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001272:	4a06      	ldr	r2, [pc, #24]	; (800128c <setTimer0+0x2c>)
 8001274:	6013      	str	r3, [r2, #0]
	 timer0_flag = 0;
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <setTimer0+0x30>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 }
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	2000001c 	.word	0x2000001c
 800128c:	20000048 	.word	0x20000048
 8001290:	2000004c 	.word	0x2000004c

08001294 <timer_run>:
 void timer_run () {
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
	 if( timer0_counter > 0) {
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <timer_run+0x2c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	dd0b      	ble.n	80012b8 <timer_run+0x24>
		 timer0_counter--;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <timer_run+0x2c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <timer_run+0x2c>)
 80012a8:	6013      	str	r3, [r2, #0]
		 if( timer0_counter == 0) timer0_flag = 1;
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <timer_run+0x2c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <timer_run+0x24>
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <timer_run+0x30>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
	 }
 }
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	20000048 	.word	0x20000048
 80012c4:	2000004c 	.word	0x2000004c

080012c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_MspInit+0x5c>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	4a14      	ldr	r2, [pc, #80]	; (8001324 <HAL_MspInit+0x5c>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6193      	str	r3, [r2, #24]
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_MspInit+0x5c>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_MspInit+0x5c>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_MspInit+0x5c>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_MspInit+0x5c>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_MspInit+0x60>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <HAL_MspInit+0x60>)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131a:	bf00      	nop
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000
 8001328:	40010000 	.word	0x40010000

0800132c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800133c:	d113      	bne.n	8001366 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <HAL_TIM_Base_MspInit+0x44>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <HAL_TIM_Base_MspInit+0x44>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	61d3      	str	r3, [r2, #28]
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_TIM_Base_MspInit+0x44>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	201c      	movs	r0, #28
 800135c:	f000 f9a1 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001360:	201c      	movs	r0, #28
 8001362:	f000 f9ba 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ba:	f000 f87f 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <TIM2_IRQHandler+0x10>)
 80013ca:	f000 ffd1 	bl	8002370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000050 	.word	0x20000050

080013d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013e6:	490d      	ldr	r1, [pc, #52]	; (800141c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013fc:	4c0a      	ldr	r4, [pc, #40]	; (8001428 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800140a:	f7ff ffe5 	bl	80013d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140e:	f001 faf7 	bl	8002a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001412:	f7ff fde3 	bl	8000fdc <main>
  bx lr
 8001416:	4770      	bx	lr
  ldr r0, =_sdata
 8001418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800141c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001420:	08002a98 	.word	0x08002a98
  ldr r2, =_sbss
 8001424:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001428:	2000009c 	.word	0x2000009c

0800142c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800142c:	e7fe      	b.n	800142c <ADC1_2_IRQHandler>
	...

08001430 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_Init+0x28>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <HAL_Init+0x28>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f923 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	200f      	movs	r0, #15
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff ff3c 	bl	80012c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f93b 	bl	80016f6 <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f000 f903 	bl	80016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000020 	.word	0x20000020
 80014b4:	20000028 	.word	0x20000028
 80014b8:	20000024 	.word	0x20000024

080014bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_IncTick+0x1c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_IncTick+0x20>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <HAL_IncTick+0x20>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	20000028 	.word	0x20000028
 80014dc:	20000098 	.word	0x20000098

080014e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b02      	ldr	r3, [pc, #8]	; (80014f0 <HAL_GetTick+0x10>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	20000098 	.word	0x20000098

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4906      	ldr	r1, [pc, #24]	; (800158c <__NVIC_EnableIRQ+0x34>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f7ff ff90 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff2d 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff42 	bl	800153c <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff90 	bl	80015e4 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5f 	bl	8001590 <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff35 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffa2 	bl	8001648 <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001710:	b480      	push	{r7}
 8001712:	b08b      	sub	sp, #44	; 0x2c
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001722:	e148      	b.n	80019b6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001724:	2201      	movs	r2, #1
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	429a      	cmp	r2, r3
 800173e:	f040 8137 	bne.w	80019b0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	4aa3      	ldr	r2, [pc, #652]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d05e      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 800174c:	4aa1      	ldr	r2, [pc, #644]	; (80019d4 <HAL_GPIO_Init+0x2c4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d875      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 8001752:	4aa1      	ldr	r2, [pc, #644]	; (80019d8 <HAL_GPIO_Init+0x2c8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d058      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 8001758:	4a9f      	ldr	r2, [pc, #636]	; (80019d8 <HAL_GPIO_Init+0x2c8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d86f      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 800175e:	4a9f      	ldr	r2, [pc, #636]	; (80019dc <HAL_GPIO_Init+0x2cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d052      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 8001764:	4a9d      	ldr	r2, [pc, #628]	; (80019dc <HAL_GPIO_Init+0x2cc>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d869      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 800176a:	4a9d      	ldr	r2, [pc, #628]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d04c      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 8001770:	4a9b      	ldr	r2, [pc, #620]	; (80019e0 <HAL_GPIO_Init+0x2d0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d863      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 8001776:	4a9b      	ldr	r2, [pc, #620]	; (80019e4 <HAL_GPIO_Init+0x2d4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d046      	beq.n	800180a <HAL_GPIO_Init+0xfa>
 800177c:	4a99      	ldr	r2, [pc, #612]	; (80019e4 <HAL_GPIO_Init+0x2d4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d85d      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 8001782:	2b12      	cmp	r3, #18
 8001784:	d82a      	bhi.n	80017dc <HAL_GPIO_Init+0xcc>
 8001786:	2b12      	cmp	r3, #18
 8001788:	d859      	bhi.n	800183e <HAL_GPIO_Init+0x12e>
 800178a:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <HAL_GPIO_Init+0x80>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	0800180b 	.word	0x0800180b
 8001794:	080017e5 	.word	0x080017e5
 8001798:	080017f7 	.word	0x080017f7
 800179c:	08001839 	.word	0x08001839
 80017a0:	0800183f 	.word	0x0800183f
 80017a4:	0800183f 	.word	0x0800183f
 80017a8:	0800183f 	.word	0x0800183f
 80017ac:	0800183f 	.word	0x0800183f
 80017b0:	0800183f 	.word	0x0800183f
 80017b4:	0800183f 	.word	0x0800183f
 80017b8:	0800183f 	.word	0x0800183f
 80017bc:	0800183f 	.word	0x0800183f
 80017c0:	0800183f 	.word	0x0800183f
 80017c4:	0800183f 	.word	0x0800183f
 80017c8:	0800183f 	.word	0x0800183f
 80017cc:	0800183f 	.word	0x0800183f
 80017d0:	0800183f 	.word	0x0800183f
 80017d4:	080017ed 	.word	0x080017ed
 80017d8:	08001801 	.word	0x08001801
 80017dc:	4a82      	ldr	r2, [pc, #520]	; (80019e8 <HAL_GPIO_Init+0x2d8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d013      	beq.n	800180a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017e2:	e02c      	b.n	800183e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	623b      	str	r3, [r7, #32]
          break;
 80017ea:	e029      	b.n	8001840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	3304      	adds	r3, #4
 80017f2:	623b      	str	r3, [r7, #32]
          break;
 80017f4:	e024      	b.n	8001840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	3308      	adds	r3, #8
 80017fc:	623b      	str	r3, [r7, #32]
          break;
 80017fe:	e01f      	b.n	8001840 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	330c      	adds	r3, #12
 8001806:	623b      	str	r3, [r7, #32]
          break;
 8001808:	e01a      	b.n	8001840 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d102      	bne.n	8001818 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001812:	2304      	movs	r3, #4
 8001814:	623b      	str	r3, [r7, #32]
          break;
 8001816:	e013      	b.n	8001840 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d105      	bne.n	800182c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001820:	2308      	movs	r3, #8
 8001822:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	611a      	str	r2, [r3, #16]
          break;
 800182a:	e009      	b.n	8001840 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800182c:	2308      	movs	r3, #8
 800182e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	615a      	str	r2, [r3, #20]
          break;
 8001836:	e003      	b.n	8001840 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
          break;
 800183c:	e000      	b.n	8001840 <HAL_GPIO_Init+0x130>
          break;
 800183e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2bff      	cmp	r3, #255	; 0xff
 8001844:	d801      	bhi.n	800184a <HAL_GPIO_Init+0x13a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	e001      	b.n	800184e <HAL_GPIO_Init+0x13e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3304      	adds	r3, #4
 800184e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2bff      	cmp	r3, #255	; 0xff
 8001854:	d802      	bhi.n	800185c <HAL_GPIO_Init+0x14c>
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x152>
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	3b08      	subs	r3, #8
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	210f      	movs	r1, #15
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	401a      	ands	r2, r3
 8001874:	6a39      	ldr	r1, [r7, #32]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	431a      	orrs	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8090 	beq.w	80019b0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001890:	4b56      	ldr	r3, [pc, #344]	; (80019ec <HAL_GPIO_Init+0x2dc>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a55      	ldr	r2, [pc, #340]	; (80019ec <HAL_GPIO_Init+0x2dc>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_GPIO_Init+0x2dc>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018a8:	4a51      	ldr	r2, [pc, #324]	; (80019f0 <HAL_GPIO_Init+0x2e0>)
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	220f      	movs	r2, #15
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4013      	ands	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a49      	ldr	r2, [pc, #292]	; (80019f4 <HAL_GPIO_Init+0x2e4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d00d      	beq.n	80018f0 <HAL_GPIO_Init+0x1e0>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a48      	ldr	r2, [pc, #288]	; (80019f8 <HAL_GPIO_Init+0x2e8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d007      	beq.n	80018ec <HAL_GPIO_Init+0x1dc>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a47      	ldr	r2, [pc, #284]	; (80019fc <HAL_GPIO_Init+0x2ec>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d101      	bne.n	80018e8 <HAL_GPIO_Init+0x1d8>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e004      	b.n	80018f2 <HAL_GPIO_Init+0x1e2>
 80018e8:	2303      	movs	r3, #3
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x1e2>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_GPIO_Init+0x1e2>
 80018f0:	2300      	movs	r3, #0
 80018f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f4:	f002 0203 	and.w	r2, r2, #3
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	4093      	lsls	r3, r2
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001902:	493b      	ldr	r1, [pc, #236]	; (80019f0 <HAL_GPIO_Init+0x2e0>)
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4937      	ldr	r1, [pc, #220]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800192a:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	43db      	mvns	r3, r3
 8001932:	4933      	ldr	r1, [pc, #204]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 8001934:	4013      	ands	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001944:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	492d      	ldr	r1, [pc, #180]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	4929      	ldr	r1, [pc, #164]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 800195c:	4013      	ands	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	4923      	ldr	r1, [pc, #140]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800197a:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	43db      	mvns	r3, r3
 8001982:	491f      	ldr	r1, [pc, #124]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 8001984:	4013      	ands	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	4919      	ldr	r1, [pc, #100]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	60cb      	str	r3, [r1, #12]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4915      	ldr	r1, [pc, #84]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	3301      	adds	r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f47f aeaf 	bne.w	8001724 <HAL_GPIO_Init+0x14>
  }
}
 80019c6:	bf00      	nop
 80019c8:	bf00      	nop
 80019ca:	372c      	adds	r7, #44	; 0x2c
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	10320000 	.word	0x10320000
 80019d8:	10310000 	.word	0x10310000
 80019dc:	10220000 	.word	0x10220000
 80019e0:	10210000 	.word	0x10210000
 80019e4:	10120000 	.word	0x10120000
 80019e8:	10110000 	.word	0x10110000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010000 	.word	0x40010000
 80019f4:	40010800 	.word	0x40010800
 80019f8:	40010c00 	.word	0x40010c00
 80019fc:	40011000 	.word	0x40011000
 8001a00:	40010400 	.word	0x40010400

08001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
 8001a10:	4613      	mov	r3, r2
 8001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a20:	e003      	b.n	8001a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	041a      	lsls	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	611a      	str	r2, [r3, #16]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	041a      	lsls	r2, r3, #16
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	43d9      	mvns	r1, r3
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	400b      	ands	r3, r1
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	611a      	str	r2, [r3, #16]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e26c      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8087 	beq.w	8001b96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a88:	4b92      	ldr	r3, [pc, #584]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d00c      	beq.n	8001aae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a94:	4b8f      	ldr	r3, [pc, #572]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d112      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x5e>
 8001aa0:	4b8c      	ldr	r3, [pc, #560]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aac:	d10b      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aae:	4b89      	ldr	r3, [pc, #548]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d06c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x12c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d168      	bne.n	8001b94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e246      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x76>
 8001ad0:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a7f      	ldr	r2, [pc, #508]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e02e      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x98>
 8001ae6:	4b7b      	ldr	r3, [pc, #492]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a7a      	ldr	r2, [pc, #488]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b78      	ldr	r3, [pc, #480]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a77      	ldr	r2, [pc, #476]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e01d      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0xbc>
 8001b0a:	4b72      	ldr	r3, [pc, #456]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a71      	ldr	r2, [pc, #452]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b6f      	ldr	r3, [pc, #444]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a6e      	ldr	r2, [pc, #440]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001b24:	4b6b      	ldr	r3, [pc, #428]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6a      	ldr	r2, [pc, #424]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b68      	ldr	r3, [pc, #416]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a67      	ldr	r2, [pc, #412]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fccc 	bl	80014e0 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fcc8 	bl	80014e0 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	; 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1fa      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0xe4>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fcb8 	bl	80014e0 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff fcb4 	bl	80014e0 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	; 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e1e6      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x10c>
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d063      	beq.n	8001c6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba2:	4b4c      	ldr	r3, [pc, #304]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00b      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bae:	4b49      	ldr	r3, [pc, #292]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d11c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x18c>
 8001bba:	4b46      	ldr	r3, [pc, #280]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x176>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e1ba      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4939      	ldr	r1, [pc, #228]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	e03a      	b.n	8001c6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff fc6d 	bl	80014e0 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fc69 	bl	80014e0 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e19b      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4927      	ldr	r1, [pc, #156]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
 8001c3c:	e015      	b.n	8001c6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fc4c 	bl	80014e0 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fc48 	bl	80014e0 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e17a      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03a      	beq.n	8001cec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d019      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c84:	f7ff fc2c 	bl	80014e0 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fc28 	bl	80014e0 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e15a      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f000 faa6 	bl	80021fc <RCC_Delay>
 8001cb0:	e01c      	b.n	8001cec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7ff fc12 	bl	80014e0 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbe:	e00f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fc0e 	bl	80014e0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d908      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e140      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	42420000 	.word	0x42420000
 8001cdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce0:	4b9e      	ldr	r3, [pc, #632]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e9      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80a6 	beq.w	8001e46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfe:	4b97      	ldr	r3, [pc, #604]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b94      	ldr	r3, [pc, #592]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a93      	ldr	r2, [pc, #588]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b91      	ldr	r3, [pc, #580]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d26:	4b8e      	ldr	r3, [pc, #568]	; (8001f60 <HAL_RCC_OscConfig+0x4f8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d118      	bne.n	8001d64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d32:	4b8b      	ldr	r3, [pc, #556]	; (8001f60 <HAL_RCC_OscConfig+0x4f8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a8a      	ldr	r2, [pc, #552]	; (8001f60 <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fbcf 	bl	80014e0 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7ff fbcb 	bl	80014e0 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b64      	cmp	r3, #100	; 0x64
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0fd      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	4b81      	ldr	r3, [pc, #516]	; (8001f60 <HAL_RCC_OscConfig+0x4f8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x312>
 8001d6c:	4b7b      	ldr	r3, [pc, #492]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4a7a      	ldr	r2, [pc, #488]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6213      	str	r3, [r2, #32]
 8001d78:	e02d      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x334>
 8001d82:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a75      	ldr	r2, [pc, #468]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6213      	str	r3, [r2, #32]
 8001d8e:	4b73      	ldr	r3, [pc, #460]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4a72      	ldr	r2, [pc, #456]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	f023 0304 	bic.w	r3, r3, #4
 8001d98:	6213      	str	r3, [r2, #32]
 8001d9a:	e01c      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d10c      	bne.n	8001dbe <HAL_RCC_OscConfig+0x356>
 8001da4:	4b6d      	ldr	r3, [pc, #436]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4a6c      	ldr	r2, [pc, #432]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6213      	str	r3, [r2, #32]
 8001db0:	4b6a      	ldr	r3, [pc, #424]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a69      	ldr	r2, [pc, #420]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6213      	str	r3, [r2, #32]
 8001dbc:	e00b      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001dbe:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a66      	ldr	r2, [pc, #408]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	4b64      	ldr	r3, [pc, #400]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a63      	ldr	r2, [pc, #396]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d015      	beq.n	8001e0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7ff fb7f 	bl	80014e0 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff fb7b 	bl	80014e0 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0ab      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0ee      	beq.n	8001de6 <HAL_RCC_OscConfig+0x37e>
 8001e08:	e014      	b.n	8001e34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fb69 	bl	80014e0 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff fb65 	bl	80014e0 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e095      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e28:	4b4c      	ldr	r3, [pc, #304]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ee      	bne.n	8001e12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d105      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3a:	4b48      	ldr	r3, [pc, #288]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	4a47      	ldr	r2, [pc, #284]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8081 	beq.w	8001f52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e50:	4b42      	ldr	r3, [pc, #264]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d061      	beq.n	8001f20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d146      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <HAL_RCC_OscConfig+0x4fc>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fb39 	bl	80014e0 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff fb35 	bl	80014e0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e067      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e84:	4b35      	ldr	r3, [pc, #212]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e98:	d108      	bne.n	8001eac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e9a:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	492d      	ldr	r1, [pc, #180]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eac:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a19      	ldr	r1, [r3, #32]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	4927      	ldr	r1, [pc, #156]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <HAL_RCC_OscConfig+0x4fc>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7ff fb09 	bl	80014e0 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7ff fb05 	bl	80014e0 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e037      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x46a>
 8001ef0:	e02f      	b.n	8001f52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_RCC_OscConfig+0x4fc>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff faf2 	bl	80014e0 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff faee 	bl	80014e0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e020      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x498>
 8001f1e:	e018      	b.n	8001f52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e013      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40007000 	.word	0x40007000
 8001f64:	42420060 	.word	0x42420060

08001f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0d0      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b6a      	ldr	r3, [pc, #424]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d910      	bls.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b67      	ldr	r3, [pc, #412]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4965      	ldr	r1, [pc, #404]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a58      	ldr	r2, [pc, #352]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fe6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b50      	ldr	r3, [pc, #320]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	494d      	ldr	r1, [pc, #308]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d040      	beq.n	8002088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d115      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e073      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e06b      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4b39      	ldr	r3, [pc, #228]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4936      	ldr	r1, [pc, #216]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7ff fa42 	bl	80014e0 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7ff fa3e 	bl	80014e0 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e053      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d210      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0207 	bic.w	r2, r3, #7
 800209e:	4922      	ldr	r1, [pc, #136]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4916      	ldr	r1, [pc, #88]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f821 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	490a      	ldr	r1, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x1c8>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1cc>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1d0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff f9a0 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40022000 	.word	0x40022000
 800212c:	40021000 	.word	0x40021000
 8002130:	08002a80 	.word	0x08002a80
 8002134:	20000020 	.word	0x20000020
 8002138:	20000024 	.word	0x20000024

0800213c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	b490      	push	{r4, r7}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002142:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002144:	1d3c      	adds	r4, r7, #4
 8002146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800214c:	f240 2301 	movw	r3, #513	; 0x201
 8002150:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002166:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b04      	cmp	r3, #4
 8002174:	d002      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x40>
 8002176:	2b08      	cmp	r3, #8
 8002178:	d003      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x46>
 800217a:	e02d      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800217e:	623b      	str	r3, [r7, #32]
      break;
 8002180:	e02d      	b.n	80021de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	0c9b      	lsrs	r3, r3, #18
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800218e:	4413      	add	r3, r2
 8002190:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002194:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	0c5b      	lsrs	r3, r3, #17
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ae:	4413      	add	r3, r2
 80021b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ba:	fb02 f203 	mul.w	r2, r2, r3
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
 80021c6:	e004      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	4a0b      	ldr	r2, [pc, #44]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	623b      	str	r3, [r7, #32]
      break;
 80021d6:	e002      	b.n	80021de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021da:	623b      	str	r3, [r7, #32]
      break;
 80021dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021de:	6a3b      	ldr	r3, [r7, #32]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc90      	pop	{r4, r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	08002a70 	.word	0x08002a70
 80021f0:	40021000 	.word	0x40021000
 80021f4:	007a1200 	.word	0x007a1200
 80021f8:	003d0900 	.word	0x003d0900

080021fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <RCC_Delay+0x34>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <RCC_Delay+0x38>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002218:	bf00      	nop
  }
  while (Delay --);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	60fa      	str	r2, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f9      	bne.n	8002218 <RCC_Delay+0x1c>
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	20000020 	.word	0x20000020
 8002234:	10624dd3 	.word	0x10624dd3

08002238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e041      	b.n	80022ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff f864 	bl	800132c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f000 fa6a 	bl	8002750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d001      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e035      	b.n	800235c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_TIM_Base_Start_IT+0x90>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d009      	beq.n	8002326 <HAL_TIM_Base_Start_IT+0x4e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231a:	d004      	beq.n	8002326 <HAL_TIM_Base_Start_IT+0x4e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a12      	ldr	r2, [pc, #72]	; (800236c <HAL_TIM_Base_Start_IT+0x94>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d111      	bne.n	800234a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b06      	cmp	r3, #6
 8002336:	d010      	beq.n	800235a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002348:	e007      	b.n	800235a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0201 	orr.w	r2, r2, #1
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40012c00 	.word	0x40012c00
 800236c:	40000400 	.word	0x40000400

08002370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d122      	bne.n	80023cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b02      	cmp	r3, #2
 8002392:	d11b      	bne.n	80023cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0202 	mvn.w	r2, #2
 800239c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f9b1 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 80023b8:	e005      	b.n	80023c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f9a4 	bl	8002708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f9b3 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d122      	bne.n	8002420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d11b      	bne.n	8002420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0204 	mvn.w	r2, #4
 80023f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f987 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 800240c:	e005      	b.n	800241a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f97a 	bl	8002708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f989 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b08      	cmp	r3, #8
 800242c:	d122      	bne.n	8002474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b08      	cmp	r3, #8
 800243a:	d11b      	bne.n	8002474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0208 	mvn.w	r2, #8
 8002444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2204      	movs	r2, #4
 800244a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f95d 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 8002460:	e005      	b.n	800246e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f950 	bl	8002708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f95f 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b10      	cmp	r3, #16
 8002480:	d122      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b10      	cmp	r3, #16
 800248e:	d11b      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0210 	mvn.w	r2, #16
 8002498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2208      	movs	r2, #8
 800249e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f933 	bl	800271a <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f926 	bl	8002708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f935 	bl	800272c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d10e      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0201 	mvn.w	r2, #1
 80024ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe fea6 	bl	8001240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	2b80      	cmp	r3, #128	; 0x80
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250c:	2b80      	cmp	r3, #128	; 0x80
 800250e:	d107      	bne.n	8002520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fa67 	bl	80029ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b40      	cmp	r3, #64	; 0x40
 800252c:	d10e      	bne.n	800254c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002538:	2b40      	cmp	r3, #64	; 0x40
 800253a:	d107      	bne.n	800254c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f8f9 	bl	800273e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b20      	cmp	r3, #32
 8002558:	d10e      	bne.n	8002578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b20      	cmp	r3, #32
 8002566:	d107      	bne.n	8002578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0220 	mvn.w	r2, #32
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fa32 	bl	80029dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_TIM_ConfigClockSource+0x18>
 8002594:	2302      	movs	r3, #2
 8002596:	e0b3      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x180>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d0:	d03e      	beq.n	8002650 <HAL_TIM_ConfigClockSource+0xd0>
 80025d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d6:	f200 8087 	bhi.w	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 80025da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025de:	f000 8085 	beq.w	80026ec <HAL_TIM_ConfigClockSource+0x16c>
 80025e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e6:	d87f      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 80025e8:	2b70      	cmp	r3, #112	; 0x70
 80025ea:	d01a      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0xa2>
 80025ec:	2b70      	cmp	r3, #112	; 0x70
 80025ee:	d87b      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 80025f0:	2b60      	cmp	r3, #96	; 0x60
 80025f2:	d050      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x116>
 80025f4:	2b60      	cmp	r3, #96	; 0x60
 80025f6:	d877      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 80025f8:	2b50      	cmp	r3, #80	; 0x50
 80025fa:	d03c      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0xf6>
 80025fc:	2b50      	cmp	r3, #80	; 0x50
 80025fe:	d873      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 8002600:	2b40      	cmp	r3, #64	; 0x40
 8002602:	d058      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x136>
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	d86f      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 8002608:	2b30      	cmp	r3, #48	; 0x30
 800260a:	d064      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x156>
 800260c:	2b30      	cmp	r3, #48	; 0x30
 800260e:	d86b      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 8002610:	2b20      	cmp	r3, #32
 8002612:	d060      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x156>
 8002614:	2b20      	cmp	r3, #32
 8002616:	d867      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 8002618:	2b00      	cmp	r3, #0
 800261a:	d05c      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x156>
 800261c:	2b10      	cmp	r3, #16
 800261e:	d05a      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002620:	e062      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6899      	ldr	r1, [r3, #8]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f000 f95c 	bl	80028ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002644:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	609a      	str	r2, [r3, #8]
      break;
 800264e:	e04e      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f000 f945 	bl	80028ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002672:	609a      	str	r2, [r3, #8]
      break;
 8002674:	e03b      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	461a      	mov	r2, r3
 8002684:	f000 f8bc 	bl	8002800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2150      	movs	r1, #80	; 0x50
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f913 	bl	80028ba <TIM_ITRx_SetConfig>
      break;
 8002694:	e02b      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	461a      	mov	r2, r3
 80026a4:	f000 f8da 	bl	800285c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2160      	movs	r1, #96	; 0x60
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f903 	bl	80028ba <TIM_ITRx_SetConfig>
      break;
 80026b4:	e01b      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6859      	ldr	r1, [r3, #4]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f000 f89c 	bl	8002800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2140      	movs	r1, #64	; 0x40
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f8f3 	bl	80028ba <TIM_ITRx_SetConfig>
      break;
 80026d4:	e00b      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f000 f8ea 	bl	80028ba <TIM_ITRx_SetConfig>
        break;
 80026e6:	e002      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026e8:	bf00      	nop
 80026ea:	e000      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a25      	ldr	r2, [pc, #148]	; (80027f8 <TIM_Base_SetConfig+0xa8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d007      	beq.n	8002778 <TIM_Base_SetConfig+0x28>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276e:	d003      	beq.n	8002778 <TIM_Base_SetConfig+0x28>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a22      	ldr	r2, [pc, #136]	; (80027fc <TIM_Base_SetConfig+0xac>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d108      	bne.n	800278a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a1a      	ldr	r2, [pc, #104]	; (80027f8 <TIM_Base_SetConfig+0xa8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d007      	beq.n	80027a2 <TIM_Base_SetConfig+0x52>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002798:	d003      	beq.n	80027a2 <TIM_Base_SetConfig+0x52>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a17      	ldr	r2, [pc, #92]	; (80027fc <TIM_Base_SetConfig+0xac>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d108      	bne.n	80027b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a07      	ldr	r2, [pc, #28]	; (80027f8 <TIM_Base_SetConfig+0xa8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d103      	bne.n	80027e8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	615a      	str	r2, [r3, #20]
}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	40000400 	.word	0x40000400

08002800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f023 0201 	bic.w	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f023 030a 	bic.w	r3, r3, #10
 800283c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	621a      	str	r2, [r3, #32]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f023 0210 	bic.w	r2, r3, #16
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002886:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	031b      	lsls	r3, r3, #12
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002898:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	621a      	str	r2, [r3, #32]
}
 80028b0:	bf00      	nop
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f043 0307 	orr.w	r3, r3, #7
 80028dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	609a      	str	r2, [r3, #8]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b087      	sub	sp, #28
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002908:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	021a      	lsls	r2, r3, #8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	431a      	orrs	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	4313      	orrs	r3, r2
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	609a      	str	r2, [r3, #8]
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002940:	2302      	movs	r3, #2
 8002942:	e041      	b.n	80029c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a14      	ldr	r2, [pc, #80]	; (80029d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d009      	beq.n	800299c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002990:	d004      	beq.n	800299c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a10      	ldr	r2, [pc, #64]	; (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d10c      	bne.n	80029b6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400

080029dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <__libc_init_array>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	2600      	movs	r6, #0
 8002a04:	4d0c      	ldr	r5, [pc, #48]	; (8002a38 <__libc_init_array+0x38>)
 8002a06:	4c0d      	ldr	r4, [pc, #52]	; (8002a3c <__libc_init_array+0x3c>)
 8002a08:	1b64      	subs	r4, r4, r5
 8002a0a:	10a4      	asrs	r4, r4, #2
 8002a0c:	42a6      	cmp	r6, r4
 8002a0e:	d109      	bne.n	8002a24 <__libc_init_array+0x24>
 8002a10:	f000 f822 	bl	8002a58 <_init>
 8002a14:	2600      	movs	r6, #0
 8002a16:	4d0a      	ldr	r5, [pc, #40]	; (8002a40 <__libc_init_array+0x40>)
 8002a18:	4c0a      	ldr	r4, [pc, #40]	; (8002a44 <__libc_init_array+0x44>)
 8002a1a:	1b64      	subs	r4, r4, r5
 8002a1c:	10a4      	asrs	r4, r4, #2
 8002a1e:	42a6      	cmp	r6, r4
 8002a20:	d105      	bne.n	8002a2e <__libc_init_array+0x2e>
 8002a22:	bd70      	pop	{r4, r5, r6, pc}
 8002a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a28:	4798      	blx	r3
 8002a2a:	3601      	adds	r6, #1
 8002a2c:	e7ee      	b.n	8002a0c <__libc_init_array+0xc>
 8002a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a32:	4798      	blx	r3
 8002a34:	3601      	adds	r6, #1
 8002a36:	e7f2      	b.n	8002a1e <__libc_init_array+0x1e>
 8002a38:	08002a90 	.word	0x08002a90
 8002a3c:	08002a90 	.word	0x08002a90
 8002a40:	08002a90 	.word	0x08002a90
 8002a44:	08002a94 	.word	0x08002a94

08002a48 <memset>:
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4402      	add	r2, r0
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d100      	bne.n	8002a52 <memset+0xa>
 8002a50:	4770      	bx	lr
 8002a52:	f803 1b01 	strb.w	r1, [r3], #1
 8002a56:	e7f9      	b.n	8002a4c <memset+0x4>

08002a58 <_init>:
 8002a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5a:	bf00      	nop
 8002a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5e:	bc08      	pop	{r3}
 8002a60:	469e      	mov	lr, r3
 8002a62:	4770      	bx	lr

08002a64 <_fini>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	bf00      	nop
 8002a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6a:	bc08      	pop	{r3}
 8002a6c:	469e      	mov	lr, r3
 8002a6e:	4770      	bx	lr

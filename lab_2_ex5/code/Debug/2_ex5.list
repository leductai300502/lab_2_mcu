
2_ex5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002004  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002110  08002110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002130  08002130  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002130  08002130  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002130  08002130  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002130  08002130  00012130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002134  08002134  00012134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000028  08002160  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08002160  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003065  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000eba  00000000  00000000  000230b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  00023f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000358  00000000  00000000  00024350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015682  00000000  00000000  000246a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000047ae  00000000  00000000  00039d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079c1d  00000000  00000000  0003e4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b80f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d6c  00000000  00000000  000b8148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	080020f8 	.word	0x080020f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	080020f8 	.word	0x080020f8

0800014c <updateClockBuffer>:
  */

//--------------------------
int hour = 15 , minute = 8 , second = 50;
int led_buffer[4] = {1 , 2 , 3 , 4};
void updateClockBuffer(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	// if hour <10 , 7seg1 = 0 , 7seg2 = hour
     if(hour < 10 ){
 8000150:	4b42      	ldr	r3, [pc, #264]	; (800025c <updateClockBuffer+0x110>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b09      	cmp	r3, #9
 8000156:	dc06      	bgt.n	8000166 <updateClockBuffer+0x1a>
    	 led_buffer[0] = 0;
 8000158:	4b41      	ldr	r3, [pc, #260]	; (8000260 <updateClockBuffer+0x114>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
    	 led_buffer[1] = hour;
 800015e:	4b3f      	ldr	r3, [pc, #252]	; (800025c <updateClockBuffer+0x110>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4a3f      	ldr	r2, [pc, #252]	; (8000260 <updateClockBuffer+0x114>)
 8000164:	6053      	str	r3, [r2, #4]
     }
     if(hour %10 == 0){
 8000166:	4b3d      	ldr	r3, [pc, #244]	; (800025c <updateClockBuffer+0x110>)
 8000168:	6819      	ldr	r1, [r3, #0]
 800016a:	4b3e      	ldr	r3, [pc, #248]	; (8000264 <updateClockBuffer+0x118>)
 800016c:	fb83 2301 	smull	r2, r3, r3, r1
 8000170:	109a      	asrs	r2, r3, #2
 8000172:	17cb      	asrs	r3, r1, #31
 8000174:	1ad2      	subs	r2, r2, r3
 8000176:	4613      	mov	r3, r2
 8000178:	009b      	lsls	r3, r3, #2
 800017a:	4413      	add	r3, r2
 800017c:	005b      	lsls	r3, r3, #1
 800017e:	1aca      	subs	r2, r1, r3
 8000180:	2a00      	cmp	r2, #0
 8000182:	d10d      	bne.n	80001a0 <updateClockBuffer+0x54>
    	 led_buffer[0] = hour/10;
 8000184:	4b35      	ldr	r3, [pc, #212]	; (800025c <updateClockBuffer+0x110>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a36      	ldr	r2, [pc, #216]	; (8000264 <updateClockBuffer+0x118>)
 800018a:	fb82 1203 	smull	r1, r2, r2, r3
 800018e:	1092      	asrs	r2, r2, #2
 8000190:	17db      	asrs	r3, r3, #31
 8000192:	1ad3      	subs	r3, r2, r3
 8000194:	4a32      	ldr	r2, [pc, #200]	; (8000260 <updateClockBuffer+0x114>)
 8000196:	6013      	str	r3, [r2, #0]
    	 led_buffer[1] = 0;
 8000198:	4b31      	ldr	r3, [pc, #196]	; (8000260 <updateClockBuffer+0x114>)
 800019a:	2200      	movs	r2, #0
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	e018      	b.n	80001d2 <updateClockBuffer+0x86>
     }
     else{
    	 led_buffer[0]= hour/10;
 80001a0:	4b2e      	ldr	r3, [pc, #184]	; (800025c <updateClockBuffer+0x110>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a2f      	ldr	r2, [pc, #188]	; (8000264 <updateClockBuffer+0x118>)
 80001a6:	fb82 1203 	smull	r1, r2, r2, r3
 80001aa:	1092      	asrs	r2, r2, #2
 80001ac:	17db      	asrs	r3, r3, #31
 80001ae:	1ad3      	subs	r3, r2, r3
 80001b0:	4a2b      	ldr	r2, [pc, #172]	; (8000260 <updateClockBuffer+0x114>)
 80001b2:	6013      	str	r3, [r2, #0]
    	 led_buffer[1]= hour%10;
 80001b4:	4b29      	ldr	r3, [pc, #164]	; (800025c <updateClockBuffer+0x110>)
 80001b6:	6819      	ldr	r1, [r3, #0]
 80001b8:	4b2a      	ldr	r3, [pc, #168]	; (8000264 <updateClockBuffer+0x118>)
 80001ba:	fb83 2301 	smull	r2, r3, r3, r1
 80001be:	109a      	asrs	r2, r3, #2
 80001c0:	17cb      	asrs	r3, r1, #31
 80001c2:	1ad2      	subs	r2, r2, r3
 80001c4:	4613      	mov	r3, r2
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	4413      	add	r3, r2
 80001ca:	005b      	lsls	r3, r3, #1
 80001cc:	1aca      	subs	r2, r1, r3
 80001ce:	4b24      	ldr	r3, [pc, #144]	; (8000260 <updateClockBuffer+0x114>)
 80001d0:	605a      	str	r2, [r3, #4]
     }
     //
     if(minute < 10 ){
 80001d2:	4b25      	ldr	r3, [pc, #148]	; (8000268 <updateClockBuffer+0x11c>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2b09      	cmp	r3, #9
 80001d8:	dc06      	bgt.n	80001e8 <updateClockBuffer+0x9c>
         led_buffer[2] = 0;
 80001da:	4b21      	ldr	r3, [pc, #132]	; (8000260 <updateClockBuffer+0x114>)
 80001dc:	2200      	movs	r2, #0
 80001de:	609a      	str	r2, [r3, #8]
         led_buffer[3] = minute;
 80001e0:	4b21      	ldr	r3, [pc, #132]	; (8000268 <updateClockBuffer+0x11c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a1e      	ldr	r2, [pc, #120]	; (8000260 <updateClockBuffer+0x114>)
 80001e6:	60d3      	str	r3, [r2, #12]
      }
     if(minute %10 == 0){
 80001e8:	4b1f      	ldr	r3, [pc, #124]	; (8000268 <updateClockBuffer+0x11c>)
 80001ea:	6819      	ldr	r1, [r3, #0]
 80001ec:	4b1d      	ldr	r3, [pc, #116]	; (8000264 <updateClockBuffer+0x118>)
 80001ee:	fb83 2301 	smull	r2, r3, r3, r1
 80001f2:	109a      	asrs	r2, r3, #2
 80001f4:	17cb      	asrs	r3, r1, #31
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	4613      	mov	r3, r2
 80001fa:	009b      	lsls	r3, r3, #2
 80001fc:	4413      	add	r3, r2
 80001fe:	005b      	lsls	r3, r3, #1
 8000200:	1aca      	subs	r2, r1, r3
 8000202:	2a00      	cmp	r2, #0
 8000204:	d10d      	bne.n	8000222 <updateClockBuffer+0xd6>
         led_buffer[2] = minute/10;
 8000206:	4b18      	ldr	r3, [pc, #96]	; (8000268 <updateClockBuffer+0x11c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a16      	ldr	r2, [pc, #88]	; (8000264 <updateClockBuffer+0x118>)
 800020c:	fb82 1203 	smull	r1, r2, r2, r3
 8000210:	1092      	asrs	r2, r2, #2
 8000212:	17db      	asrs	r3, r3, #31
 8000214:	1ad3      	subs	r3, r2, r3
 8000216:	4a12      	ldr	r2, [pc, #72]	; (8000260 <updateClockBuffer+0x114>)
 8000218:	6093      	str	r3, [r2, #8]
         led_buffer[3] = 0;
 800021a:	4b11      	ldr	r3, [pc, #68]	; (8000260 <updateClockBuffer+0x114>)
 800021c:	2200      	movs	r2, #0
 800021e:	60da      	str	r2, [r3, #12]
       }
      else{
         led_buffer[2]= minute/10;
         led_buffer[3]= minute%10;
       }
}
 8000220:	e018      	b.n	8000254 <updateClockBuffer+0x108>
         led_buffer[2]= minute/10;
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <updateClockBuffer+0x11c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a0f      	ldr	r2, [pc, #60]	; (8000264 <updateClockBuffer+0x118>)
 8000228:	fb82 1203 	smull	r1, r2, r2, r3
 800022c:	1092      	asrs	r2, r2, #2
 800022e:	17db      	asrs	r3, r3, #31
 8000230:	1ad3      	subs	r3, r2, r3
 8000232:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <updateClockBuffer+0x114>)
 8000234:	6093      	str	r3, [r2, #8]
         led_buffer[3]= minute%10;
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <updateClockBuffer+0x11c>)
 8000238:	6819      	ldr	r1, [r3, #0]
 800023a:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <updateClockBuffer+0x118>)
 800023c:	fb83 2301 	smull	r2, r3, r3, r1
 8000240:	109a      	asrs	r2, r3, #2
 8000242:	17cb      	asrs	r3, r1, #31
 8000244:	1ad2      	subs	r2, r2, r3
 8000246:	4613      	mov	r3, r2
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	4413      	add	r3, r2
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	1aca      	subs	r2, r1, r3
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <updateClockBuffer+0x114>)
 8000252:	60da      	str	r2, [r3, #12]
}
 8000254:	bf00      	nop
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	20000000 	.word	0x20000000
 8000260:	2000000c 	.word	0x2000000c
 8000264:	66666667 	.word	0x66666667
 8000268:	20000004 	.word	0x20000004

0800026c <digital_clock>:
//--------------------------
void digital_clock(){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
 // Display the first 7 SEG with led_buffer [0]
	 if(led_buffer[0] == 0){
 8000270:	4bc9      	ldr	r3, [pc, #804]	; (8000598 <digital_clock+0x32c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d122      	bne.n	80002be <digital_clock+0x52>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2102      	movs	r1, #2
 800027c:	48c7      	ldr	r0, [pc, #796]	; (800059c <digital_clock+0x330>)
 800027e:	f001 faf5 	bl	800186c <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2104      	movs	r1, #4
 8000286:	48c5      	ldr	r0, [pc, #788]	; (800059c <digital_clock+0x330>)
 8000288:	f001 faf0 	bl	800186c <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2108      	movs	r1, #8
 8000290:	48c2      	ldr	r0, [pc, #776]	; (800059c <digital_clock+0x330>)
 8000292:	f001 faeb 	bl	800186c <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	2110      	movs	r1, #16
 800029a:	48c0      	ldr	r0, [pc, #768]	; (800059c <digital_clock+0x330>)
 800029c:	f001 fae6 	bl	800186c <HAL_GPIO_WritePin>
 		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2120      	movs	r1, #32
 80002a4:	48bd      	ldr	r0, [pc, #756]	; (800059c <digital_clock+0x330>)
 80002a6:	f001 fae1 	bl	800186c <HAL_GPIO_WritePin>
 		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2140      	movs	r1, #64	; 0x40
 80002ae:	48bb      	ldr	r0, [pc, #748]	; (800059c <digital_clock+0x330>)
 80002b0:	f001 fadc 	bl	800186c <HAL_GPIO_WritePin>
 		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2180      	movs	r1, #128	; 0x80
 80002b8:	48b8      	ldr	r0, [pc, #736]	; (800059c <digital_clock+0x330>)
 80002ba:	f001 fad7 	bl	800186c <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 1){
 80002be:	4bb6      	ldr	r3, [pc, #728]	; (8000598 <digital_clock+0x32c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d122      	bne.n	800030c <digital_clock+0xa0>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2102      	movs	r1, #2
 80002ca:	48b4      	ldr	r0, [pc, #720]	; (800059c <digital_clock+0x330>)
 80002cc:	f001 face 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2104      	movs	r1, #4
 80002d4:	48b1      	ldr	r0, [pc, #708]	; (800059c <digital_clock+0x330>)
 80002d6:	f001 fac9 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2108      	movs	r1, #8
 80002de:	48af      	ldr	r0, [pc, #700]	; (800059c <digital_clock+0x330>)
 80002e0:	f001 fac4 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	2110      	movs	r1, #16
 80002e8:	48ac      	ldr	r0, [pc, #688]	; (800059c <digital_clock+0x330>)
 80002ea:	f001 fabf 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 80002ee:	2201      	movs	r2, #1
 80002f0:	2120      	movs	r1, #32
 80002f2:	48aa      	ldr	r0, [pc, #680]	; (800059c <digital_clock+0x330>)
 80002f4:	f001 faba 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	2140      	movs	r1, #64	; 0x40
 80002fc:	48a7      	ldr	r0, [pc, #668]	; (800059c <digital_clock+0x330>)
 80002fe:	f001 fab5 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, SET);;
 8000302:	2201      	movs	r2, #1
 8000304:	2180      	movs	r1, #128	; 0x80
 8000306:	48a5      	ldr	r0, [pc, #660]	; (800059c <digital_clock+0x330>)
 8000308:	f001 fab0 	bl	800186c <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 2){
 800030c:	4ba2      	ldr	r3, [pc, #648]	; (8000598 <digital_clock+0x32c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b02      	cmp	r3, #2
 8000312:	d122      	bne.n	800035a <digital_clock+0xee>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	2102      	movs	r1, #2
 8000318:	48a0      	ldr	r0, [pc, #640]	; (800059c <digital_clock+0x330>)
 800031a:	f001 faa7 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	2104      	movs	r1, #4
 8000322:	489e      	ldr	r0, [pc, #632]	; (800059c <digital_clock+0x330>)
 8000324:	f001 faa2 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, SET);
 8000328:	2201      	movs	r2, #1
 800032a:	2108      	movs	r1, #8
 800032c:	489b      	ldr	r0, [pc, #620]	; (800059c <digital_clock+0x330>)
 800032e:	f001 fa9d 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2110      	movs	r1, #16
 8000336:	4899      	ldr	r0, [pc, #612]	; (800059c <digital_clock+0x330>)
 8000338:	f001 fa98 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2120      	movs	r1, #32
 8000340:	4896      	ldr	r0, [pc, #600]	; (800059c <digital_clock+0x330>)
 8000342:	f001 fa93 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2140      	movs	r1, #64	; 0x40
 800034a:	4894      	ldr	r0, [pc, #592]	; (800059c <digital_clock+0x330>)
 800034c:	f001 fa8e 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2180      	movs	r1, #128	; 0x80
 8000354:	4891      	ldr	r0, [pc, #580]	; (800059c <digital_clock+0x330>)
 8000356:	f001 fa89 	bl	800186c <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 3){
 800035a:	4b8f      	ldr	r3, [pc, #572]	; (8000598 <digital_clock+0x32c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b03      	cmp	r3, #3
 8000360:	d122      	bne.n	80003a8 <digital_clock+0x13c>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	2102      	movs	r1, #2
 8000366:	488d      	ldr	r0, [pc, #564]	; (800059c <digital_clock+0x330>)
 8000368:	f001 fa80 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2104      	movs	r1, #4
 8000370:	488a      	ldr	r0, [pc, #552]	; (800059c <digital_clock+0x330>)
 8000372:	f001 fa7b 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2108      	movs	r1, #8
 800037a:	4888      	ldr	r0, [pc, #544]	; (800059c <digital_clock+0x330>)
 800037c:	f001 fa76 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2110      	movs	r1, #16
 8000384:	4885      	ldr	r0, [pc, #532]	; (800059c <digital_clock+0x330>)
 8000386:	f001 fa71 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 800038a:	2201      	movs	r2, #1
 800038c:	2120      	movs	r1, #32
 800038e:	4883      	ldr	r0, [pc, #524]	; (800059c <digital_clock+0x330>)
 8000390:	f001 fa6c 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 8000394:	2201      	movs	r2, #1
 8000396:	2140      	movs	r1, #64	; 0x40
 8000398:	4880      	ldr	r0, [pc, #512]	; (800059c <digital_clock+0x330>)
 800039a:	f001 fa67 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2180      	movs	r1, #128	; 0x80
 80003a2:	487e      	ldr	r0, [pc, #504]	; (800059c <digital_clock+0x330>)
 80003a4:	f001 fa62 	bl	800186c <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 4){
 80003a8:	4b7b      	ldr	r3, [pc, #492]	; (8000598 <digital_clock+0x32c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b04      	cmp	r3, #4
 80003ae:	d122      	bne.n	80003f6 <digital_clock+0x18a>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	2102      	movs	r1, #2
 80003b4:	4879      	ldr	r0, [pc, #484]	; (800059c <digital_clock+0x330>)
 80003b6:	f001 fa59 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2104      	movs	r1, #4
 80003be:	4877      	ldr	r0, [pc, #476]	; (800059c <digital_clock+0x330>)
 80003c0:	f001 fa54 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2108      	movs	r1, #8
 80003c8:	4874      	ldr	r0, [pc, #464]	; (800059c <digital_clock+0x330>)
 80003ca:	f001 fa4f 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2110      	movs	r1, #16
 80003d2:	4872      	ldr	r0, [pc, #456]	; (800059c <digital_clock+0x330>)
 80003d4:	f001 fa4a 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2120      	movs	r1, #32
 80003dc:	486f      	ldr	r0, [pc, #444]	; (800059c <digital_clock+0x330>)
 80003de:	f001 fa45 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2140      	movs	r1, #64	; 0x40
 80003e6:	486d      	ldr	r0, [pc, #436]	; (800059c <digital_clock+0x330>)
 80003e8:	f001 fa40 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2180      	movs	r1, #128	; 0x80
 80003f0:	486a      	ldr	r0, [pc, #424]	; (800059c <digital_clock+0x330>)
 80003f2:	f001 fa3b 	bl	800186c <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 5){
 80003f6:	4b68      	ldr	r3, [pc, #416]	; (8000598 <digital_clock+0x32c>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b05      	cmp	r3, #5
 80003fc:	d122      	bne.n	8000444 <digital_clock+0x1d8>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2102      	movs	r1, #2
 8000402:	4866      	ldr	r0, [pc, #408]	; (800059c <digital_clock+0x330>)
 8000404:	f001 fa32 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2104      	movs	r1, #4
 800040c:	4863      	ldr	r0, [pc, #396]	; (800059c <digital_clock+0x330>)
 800040e:	f001 fa2d 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	2108      	movs	r1, #8
 8000416:	4861      	ldr	r0, [pc, #388]	; (800059c <digital_clock+0x330>)
 8000418:	f001 fa28 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2110      	movs	r1, #16
 8000420:	485e      	ldr	r0, [pc, #376]	; (800059c <digital_clock+0x330>)
 8000422:	f001 fa23 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 8000426:	2201      	movs	r2, #1
 8000428:	2120      	movs	r1, #32
 800042a:	485c      	ldr	r0, [pc, #368]	; (800059c <digital_clock+0x330>)
 800042c:	f001 fa1e 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2140      	movs	r1, #64	; 0x40
 8000434:	4859      	ldr	r0, [pc, #356]	; (800059c <digital_clock+0x330>)
 8000436:	f001 fa19 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2180      	movs	r1, #128	; 0x80
 800043e:	4857      	ldr	r0, [pc, #348]	; (800059c <digital_clock+0x330>)
 8000440:	f001 fa14 	bl	800186c <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 6){
 8000444:	4b54      	ldr	r3, [pc, #336]	; (8000598 <digital_clock+0x32c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b06      	cmp	r3, #6
 800044a:	d122      	bne.n	8000492 <digital_clock+0x226>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2102      	movs	r1, #2
 8000450:	4852      	ldr	r0, [pc, #328]	; (800059c <digital_clock+0x330>)
 8000452:	f001 fa0b 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, SET);
 8000456:	2201      	movs	r2, #1
 8000458:	2104      	movs	r1, #4
 800045a:	4850      	ldr	r0, [pc, #320]	; (800059c <digital_clock+0x330>)
 800045c:	f001 fa06 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2108      	movs	r1, #8
 8000464:	484d      	ldr	r0, [pc, #308]	; (800059c <digital_clock+0x330>)
 8000466:	f001 fa01 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2110      	movs	r1, #16
 800046e:	484b      	ldr	r0, [pc, #300]	; (800059c <digital_clock+0x330>)
 8000470:	f001 f9fc 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2120      	movs	r1, #32
 8000478:	4848      	ldr	r0, [pc, #288]	; (800059c <digital_clock+0x330>)
 800047a:	f001 f9f7 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2140      	movs	r1, #64	; 0x40
 8000482:	4846      	ldr	r0, [pc, #280]	; (800059c <digital_clock+0x330>)
 8000484:	f001 f9f2 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	4843      	ldr	r0, [pc, #268]	; (800059c <digital_clock+0x330>)
 800048e:	f001 f9ed 	bl	800186c <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 7){
 8000492:	4b41      	ldr	r3, [pc, #260]	; (8000598 <digital_clock+0x32c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	2b07      	cmp	r3, #7
 8000498:	d122      	bne.n	80004e0 <digital_clock+0x274>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2102      	movs	r1, #2
 800049e:	483f      	ldr	r0, [pc, #252]	; (800059c <digital_clock+0x330>)
 80004a0:	f001 f9e4 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2104      	movs	r1, #4
 80004a8:	483c      	ldr	r0, [pc, #240]	; (800059c <digital_clock+0x330>)
 80004aa:	f001 f9df 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2108      	movs	r1, #8
 80004b2:	483a      	ldr	r0, [pc, #232]	; (800059c <digital_clock+0x330>)
 80004b4:	f001 f9da 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, SET);
 80004b8:	2201      	movs	r2, #1
 80004ba:	2110      	movs	r1, #16
 80004bc:	4837      	ldr	r0, [pc, #220]	; (800059c <digital_clock+0x330>)
 80004be:	f001 f9d5 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 80004c2:	2201      	movs	r2, #1
 80004c4:	2120      	movs	r1, #32
 80004c6:	4835      	ldr	r0, [pc, #212]	; (800059c <digital_clock+0x330>)
 80004c8:	f001 f9d0 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2140      	movs	r1, #64	; 0x40
 80004d0:	4832      	ldr	r0, [pc, #200]	; (800059c <digital_clock+0x330>)
 80004d2:	f001 f9cb 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	4830      	ldr	r0, [pc, #192]	; (800059c <digital_clock+0x330>)
 80004dc:	f001 f9c6 	bl	800186c <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 8){
 80004e0:	4b2d      	ldr	r3, [pc, #180]	; (8000598 <digital_clock+0x32c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	d122      	bne.n	800052e <digital_clock+0x2c2>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2102      	movs	r1, #2
 80004ec:	482b      	ldr	r0, [pc, #172]	; (800059c <digital_clock+0x330>)
 80004ee:	f001 f9bd 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2104      	movs	r1, #4
 80004f6:	4829      	ldr	r0, [pc, #164]	; (800059c <digital_clock+0x330>)
 80004f8:	f001 f9b8 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2108      	movs	r1, #8
 8000500:	4826      	ldr	r0, [pc, #152]	; (800059c <digital_clock+0x330>)
 8000502:	f001 f9b3 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2110      	movs	r1, #16
 800050a:	4824      	ldr	r0, [pc, #144]	; (800059c <digital_clock+0x330>)
 800050c:	f001 f9ae 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2120      	movs	r1, #32
 8000514:	4821      	ldr	r0, [pc, #132]	; (800059c <digital_clock+0x330>)
 8000516:	f001 f9a9 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2140      	movs	r1, #64	; 0x40
 800051e:	481f      	ldr	r0, [pc, #124]	; (800059c <digital_clock+0x330>)
 8000520:	f001 f9a4 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	481c      	ldr	r0, [pc, #112]	; (800059c <digital_clock+0x330>)
 800052a:	f001 f99f 	bl	800186c <HAL_GPIO_WritePin>
	 }
	 if(led_buffer[0] == 9){
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <digital_clock+0x32c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b09      	cmp	r3, #9
 8000534:	d122      	bne.n	800057c <digital_clock+0x310>
		 HAL_GPIO_WritePin(SEG1_A_GPIO_Port, SEG1_A_Pin, RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2102      	movs	r1, #2
 800053a:	4818      	ldr	r0, [pc, #96]	; (800059c <digital_clock+0x330>)
 800053c:	f001 f996 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_B_GPIO_Port, SEG1_B_Pin, RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2104      	movs	r1, #4
 8000544:	4815      	ldr	r0, [pc, #84]	; (800059c <digital_clock+0x330>)
 8000546:	f001 f991 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_C_GPIO_Port, SEG1_C_Pin, RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2108      	movs	r1, #8
 800054e:	4813      	ldr	r0, [pc, #76]	; (800059c <digital_clock+0x330>)
 8000550:	f001 f98c 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_D_GPIO_Port, SEG1_D_Pin, RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2110      	movs	r1, #16
 8000558:	4810      	ldr	r0, [pc, #64]	; (800059c <digital_clock+0x330>)
 800055a:	f001 f987 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_E_GPIO_Port, SEG1_E_Pin, SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2120      	movs	r1, #32
 8000562:	480e      	ldr	r0, [pc, #56]	; (800059c <digital_clock+0x330>)
 8000564:	f001 f982 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_F_GPIO_Port, SEG1_F_Pin, RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	480b      	ldr	r0, [pc, #44]	; (800059c <digital_clock+0x330>)
 800056e:	f001 f97d 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG1_G_GPIO_Port, SEG1_G_Pin, RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	4809      	ldr	r0, [pc, #36]	; (800059c <digital_clock+0x330>)
 8000578:	f001 f978 	bl	800186c <HAL_GPIO_WritePin>
	 }
 // Display the second 7 SEG with led_buffer [1]
	 if(led_buffer[1] == 0){
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <digital_clock+0x32c>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d12e      	bne.n	80005e2 <digital_clock+0x376>
		 HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <digital_clock+0x330>)
 800058c:	f001 f96e 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000596:	e003      	b.n	80005a0 <digital_clock+0x334>
 8000598:	2000000c 	.word	0x2000000c
 800059c:	40010800 	.word	0x40010800
 80005a0:	48d0      	ldr	r0, [pc, #832]	; (80008e4 <digital_clock+0x678>)
 80005a2:	f001 f963 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ac:	48cd      	ldr	r0, [pc, #820]	; (80008e4 <digital_clock+0x678>)
 80005ae:	f001 f95d 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b8:	48ca      	ldr	r0, [pc, #808]	; (80008e4 <digital_clock+0x678>)
 80005ba:	f001 f957 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c4:	48c7      	ldr	r0, [pc, #796]	; (80008e4 <digital_clock+0x678>)
 80005c6:	f001 f951 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d0:	48c4      	ldr	r0, [pc, #784]	; (80008e4 <digital_clock+0x678>)
 80005d2:	f001 f94b 	bl	800186c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005dc:	48c1      	ldr	r0, [pc, #772]	; (80008e4 <digital_clock+0x678>)
 80005de:	f001 f945 	bl	800186c <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 1){
 80005e2:	4bc1      	ldr	r3, [pc, #772]	; (80008e8 <digital_clock+0x67c>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d129      	bne.n	800063e <digital_clock+0x3d2>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	48bc      	ldr	r0, [pc, #752]	; (80008e4 <digital_clock+0x678>)
 80005f2:	f001 f93b 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fc:	48b9      	ldr	r0, [pc, #740]	; (80008e4 <digital_clock+0x678>)
 80005fe:	f001 f935 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000608:	48b6      	ldr	r0, [pc, #728]	; (80008e4 <digital_clock+0x678>)
 800060a:	f001 f92f 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000614:	48b3      	ldr	r0, [pc, #716]	; (80008e4 <digital_clock+0x678>)
 8000616:	f001 f929 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000620:	48b0      	ldr	r0, [pc, #704]	; (80008e4 <digital_clock+0x678>)
 8000622:	f001 f923 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062c:	48ad      	ldr	r0, [pc, #692]	; (80008e4 <digital_clock+0x678>)
 800062e:	f001 f91d 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, SET);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000638:	48aa      	ldr	r0, [pc, #680]	; (80008e4 <digital_clock+0x678>)
 800063a:	f001 f917 	bl	800186c <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 2){
 800063e:	4baa      	ldr	r3, [pc, #680]	; (80008e8 <digital_clock+0x67c>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	2b02      	cmp	r3, #2
 8000644:	d129      	bne.n	800069a <digital_clock+0x42e>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	48a5      	ldr	r0, [pc, #660]	; (80008e4 <digital_clock+0x678>)
 800064e:	f001 f90d 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000658:	48a2      	ldr	r0, [pc, #648]	; (80008e4 <digital_clock+0x678>)
 800065a:	f001 f907 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000664:	489f      	ldr	r0, [pc, #636]	; (80008e4 <digital_clock+0x678>)
 8000666:	f001 f901 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000670:	489c      	ldr	r0, [pc, #624]	; (80008e4 <digital_clock+0x678>)
 8000672:	f001 f8fb 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067c:	4899      	ldr	r0, [pc, #612]	; (80008e4 <digital_clock+0x678>)
 800067e:	f001 f8f5 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000688:	4896      	ldr	r0, [pc, #600]	; (80008e4 <digital_clock+0x678>)
 800068a:	f001 f8ef 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000694:	4893      	ldr	r0, [pc, #588]	; (80008e4 <digital_clock+0x678>)
 8000696:	f001 f8e9 	bl	800186c <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 3){
 800069a:	4b93      	ldr	r3, [pc, #588]	; (80008e8 <digital_clock+0x67c>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	2b03      	cmp	r3, #3
 80006a0:	d129      	bne.n	80006f6 <digital_clock+0x48a>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a8:	488e      	ldr	r0, [pc, #568]	; (80008e4 <digital_clock+0x678>)
 80006aa:	f001 f8df 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b4:	488b      	ldr	r0, [pc, #556]	; (80008e4 <digital_clock+0x678>)
 80006b6:	f001 f8d9 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c0:	4888      	ldr	r0, [pc, #544]	; (80008e4 <digital_clock+0x678>)
 80006c2:	f001 f8d3 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006cc:	4885      	ldr	r0, [pc, #532]	; (80008e4 <digital_clock+0x678>)
 80006ce:	f001 f8cd 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d8:	4882      	ldr	r0, [pc, #520]	; (80008e4 <digital_clock+0x678>)
 80006da:	f001 f8c7 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e4:	487f      	ldr	r0, [pc, #508]	; (80008e4 <digital_clock+0x678>)
 80006e6:	f001 f8c1 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f0:	487c      	ldr	r0, [pc, #496]	; (80008e4 <digital_clock+0x678>)
 80006f2:	f001 f8bb 	bl	800186c <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 4){
 80006f6:	4b7c      	ldr	r3, [pc, #496]	; (80008e8 <digital_clock+0x67c>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d129      	bne.n	8000752 <digital_clock+0x4e6>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000704:	4877      	ldr	r0, [pc, #476]	; (80008e4 <digital_clock+0x678>)
 8000706:	f001 f8b1 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000710:	4874      	ldr	r0, [pc, #464]	; (80008e4 <digital_clock+0x678>)
 8000712:	f001 f8ab 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071c:	4871      	ldr	r0, [pc, #452]	; (80008e4 <digital_clock+0x678>)
 800071e:	f001 f8a5 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000728:	486e      	ldr	r0, [pc, #440]	; (80008e4 <digital_clock+0x678>)
 800072a:	f001 f89f 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000734:	486b      	ldr	r0, [pc, #428]	; (80008e4 <digital_clock+0x678>)
 8000736:	f001 f899 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000740:	4868      	ldr	r0, [pc, #416]	; (80008e4 <digital_clock+0x678>)
 8000742:	f001 f893 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074c:	4865      	ldr	r0, [pc, #404]	; (80008e4 <digital_clock+0x678>)
 800074e:	f001 f88d 	bl	800186c <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 5){
 8000752:	4b65      	ldr	r3, [pc, #404]	; (80008e8 <digital_clock+0x67c>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d129      	bne.n	80007ae <digital_clock+0x542>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	4860      	ldr	r0, [pc, #384]	; (80008e4 <digital_clock+0x678>)
 8000762:	f001 f883 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076c:	485d      	ldr	r0, [pc, #372]	; (80008e4 <digital_clock+0x678>)
 800076e:	f001 f87d 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000778:	485a      	ldr	r0, [pc, #360]	; (80008e4 <digital_clock+0x678>)
 800077a:	f001 f877 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000784:	4857      	ldr	r0, [pc, #348]	; (80008e4 <digital_clock+0x678>)
 8000786:	f001 f871 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000790:	4854      	ldr	r0, [pc, #336]	; (80008e4 <digital_clock+0x678>)
 8000792:	f001 f86b 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079c:	4851      	ldr	r0, [pc, #324]	; (80008e4 <digital_clock+0x678>)
 800079e:	f001 f865 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007a8:	484e      	ldr	r0, [pc, #312]	; (80008e4 <digital_clock+0x678>)
 80007aa:	f001 f85f 	bl	800186c <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 6){
 80007ae:	4b4e      	ldr	r3, [pc, #312]	; (80008e8 <digital_clock+0x67c>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d129      	bne.n	800080a <digital_clock+0x59e>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007bc:	4849      	ldr	r0, [pc, #292]	; (80008e4 <digital_clock+0x678>)
 80007be:	f001 f855 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c8:	4846      	ldr	r0, [pc, #280]	; (80008e4 <digital_clock+0x678>)
 80007ca:	f001 f84f 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d4:	4843      	ldr	r0, [pc, #268]	; (80008e4 <digital_clock+0x678>)
 80007d6:	f001 f849 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e0:	4840      	ldr	r0, [pc, #256]	; (80008e4 <digital_clock+0x678>)
 80007e2:	f001 f843 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ec:	483d      	ldr	r0, [pc, #244]	; (80008e4 <digital_clock+0x678>)
 80007ee:	f001 f83d 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f8:	483a      	ldr	r0, [pc, #232]	; (80008e4 <digital_clock+0x678>)
 80007fa:	f001 f837 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000804:	4837      	ldr	r0, [pc, #220]	; (80008e4 <digital_clock+0x678>)
 8000806:	f001 f831 	bl	800186c <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 7){
 800080a:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <digital_clock+0x67c>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b07      	cmp	r3, #7
 8000810:	d129      	bne.n	8000866 <digital_clock+0x5fa>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000818:	4832      	ldr	r0, [pc, #200]	; (80008e4 <digital_clock+0x678>)
 800081a:	f001 f827 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	482f      	ldr	r0, [pc, #188]	; (80008e4 <digital_clock+0x678>)
 8000826:	f001 f821 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000830:	482c      	ldr	r0, [pc, #176]	; (80008e4 <digital_clock+0x678>)
 8000832:	f001 f81b 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, SET);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083c:	4829      	ldr	r0, [pc, #164]	; (80008e4 <digital_clock+0x678>)
 800083e:	f001 f815 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000848:	4826      	ldr	r0, [pc, #152]	; (80008e4 <digital_clock+0x678>)
 800084a:	f001 f80f 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, SET);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000854:	4823      	ldr	r0, [pc, #140]	; (80008e4 <digital_clock+0x678>)
 8000856:	f001 f809 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, SET);
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000860:	4820      	ldr	r0, [pc, #128]	; (80008e4 <digital_clock+0x678>)
 8000862:	f001 f803 	bl	800186c <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 8){
 8000866:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <digital_clock+0x67c>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b08      	cmp	r3, #8
 800086c:	d129      	bne.n	80008c2 <digital_clock+0x656>
	 		HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000874:	481b      	ldr	r0, [pc, #108]	; (80008e4 <digital_clock+0x678>)
 8000876:	f000 fff9 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000880:	4818      	ldr	r0, [pc, #96]	; (80008e4 <digital_clock+0x678>)
 8000882:	f000 fff3 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088c:	4815      	ldr	r0, [pc, #84]	; (80008e4 <digital_clock+0x678>)
 800088e:	f000 ffed 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000898:	4812      	ldr	r0, [pc, #72]	; (80008e4 <digital_clock+0x678>)
 800089a:	f000 ffe7 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a4:	480f      	ldr	r0, [pc, #60]	; (80008e4 <digital_clock+0x678>)
 80008a6:	f000 ffe1 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <digital_clock+0x678>)
 80008b2:	f000 ffdb 	bl	800186c <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <digital_clock+0x678>)
 80008be:	f000 ffd5 	bl	800186c <HAL_GPIO_WritePin>
	 	 }
	 	 if(led_buffer[1] == 9){
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <digital_clock+0x67c>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2b09      	cmp	r3, #9
 80008c8:	d12e      	bne.n	8000928 <digital_clock+0x6bc>
	 		 HAL_GPIO_WritePin(SEG2_A_GPIO_Port, SEG2_A_Pin, RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <digital_clock+0x678>)
 80008d2:	f000 ffcb 	bl	800186c <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(SEG2_B_GPIO_Port, SEG2_B_Pin, RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008dc:	4801      	ldr	r0, [pc, #4]	; (80008e4 <digital_clock+0x678>)
 80008de:	f000 ffc5 	bl	800186c <HAL_GPIO_WritePin>
 80008e2:	e003      	b.n	80008ec <digital_clock+0x680>
 80008e4:	40010800 	.word	0x40010800
 80008e8:	2000000c 	.word	0x2000000c
	 		 HAL_GPIO_WritePin(SEG2_C_GPIO_Port, SEG2_C_Pin, RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f2:	48ca      	ldr	r0, [pc, #808]	; (8000c1c <digital_clock+0x9b0>)
 80008f4:	f000 ffba 	bl	800186c <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(SEG2_D_GPIO_Port, SEG2_D_Pin, RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fe:	48c7      	ldr	r0, [pc, #796]	; (8000c1c <digital_clock+0x9b0>)
 8000900:	f000 ffb4 	bl	800186c <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(SEG2_E_GPIO_Port, SEG2_E_Pin, SET);
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090a:	48c4      	ldr	r0, [pc, #784]	; (8000c1c <digital_clock+0x9b0>)
 800090c:	f000 ffae 	bl	800186c <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(SEG2_F_GPIO_Port, SEG2_F_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000916:	48c1      	ldr	r0, [pc, #772]	; (8000c1c <digital_clock+0x9b0>)
 8000918:	f000 ffa8 	bl	800186c <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(SEG2_G_GPIO_Port, SEG2_G_Pin, RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000922:	48be      	ldr	r0, [pc, #760]	; (8000c1c <digital_clock+0x9b0>)
 8000924:	f000 ffa2 	bl	800186c <HAL_GPIO_WritePin>
	 	 };

 // Display the third 7 SEG with led_buffer [2]
	    	if(led_buffer[2] == 0){
 8000928:	4bbd      	ldr	r3, [pc, #756]	; (8000c20 <digital_clock+0x9b4>)
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d122      	bne.n	8000976 <digital_clock+0x70a>
	    		 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2101      	movs	r1, #1
 8000934:	48bb      	ldr	r0, [pc, #748]	; (8000c24 <digital_clock+0x9b8>)
 8000936:	f000 ff99 	bl	800186c <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2102      	movs	r1, #2
 800093e:	48b9      	ldr	r0, [pc, #740]	; (8000c24 <digital_clock+0x9b8>)
 8000940:	f000 ff94 	bl	800186c <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2104      	movs	r1, #4
 8000948:	48b6      	ldr	r0, [pc, #728]	; (8000c24 <digital_clock+0x9b8>)
 800094a:	f000 ff8f 	bl	800186c <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	48b4      	ldr	r0, [pc, #720]	; (8000c24 <digital_clock+0x9b8>)
 8000954:	f000 ff8a 	bl	800186c <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2110      	movs	r1, #16
 800095c:	48b1      	ldr	r0, [pc, #708]	; (8000c24 <digital_clock+0x9b8>)
 800095e:	f000 ff85 	bl	800186c <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2120      	movs	r1, #32
 8000966:	48af      	ldr	r0, [pc, #700]	; (8000c24 <digital_clock+0x9b8>)
 8000968:	f000 ff80 	bl	800186c <HAL_GPIO_WritePin>
	    		 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2140      	movs	r1, #64	; 0x40
 8000970:	48ac      	ldr	r0, [pc, #688]	; (8000c24 <digital_clock+0x9b8>)
 8000972:	f000 ff7b 	bl	800186c <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 1){
 8000976:	4baa      	ldr	r3, [pc, #680]	; (8000c20 <digital_clock+0x9b4>)
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d122      	bne.n	80009c4 <digital_clock+0x758>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2101      	movs	r1, #1
 8000982:	48a8      	ldr	r0, [pc, #672]	; (8000c24 <digital_clock+0x9b8>)
 8000984:	f000 ff72 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2102      	movs	r1, #2
 800098c:	48a5      	ldr	r0, [pc, #660]	; (8000c24 <digital_clock+0x9b8>)
 800098e:	f000 ff6d 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2104      	movs	r1, #4
 8000996:	48a3      	ldr	r0, [pc, #652]	; (8000c24 <digital_clock+0x9b8>)
 8000998:	f000 ff68 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2108      	movs	r1, #8
 80009a0:	48a0      	ldr	r0, [pc, #640]	; (8000c24 <digital_clock+0x9b8>)
 80009a2:	f000 ff63 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2110      	movs	r1, #16
 80009aa:	489e      	ldr	r0, [pc, #632]	; (8000c24 <digital_clock+0x9b8>)
 80009ac:	f000 ff5e 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2120      	movs	r1, #32
 80009b4:	489b      	ldr	r0, [pc, #620]	; (8000c24 <digital_clock+0x9b8>)
 80009b6:	f000 ff59 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2140      	movs	r1, #64	; 0x40
 80009be:	4899      	ldr	r0, [pc, #612]	; (8000c24 <digital_clock+0x9b8>)
 80009c0:	f000 ff54 	bl	800186c <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 2){
 80009c4:	4b96      	ldr	r3, [pc, #600]	; (8000c20 <digital_clock+0x9b4>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d122      	bne.n	8000a12 <digital_clock+0x7a6>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2101      	movs	r1, #1
 80009d0:	4894      	ldr	r0, [pc, #592]	; (8000c24 <digital_clock+0x9b8>)
 80009d2:	f000 ff4b 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2102      	movs	r1, #2
 80009da:	4892      	ldr	r0, [pc, #584]	; (8000c24 <digital_clock+0x9b8>)
 80009dc:	f000 ff46 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2104      	movs	r1, #4
 80009e4:	488f      	ldr	r0, [pc, #572]	; (8000c24 <digital_clock+0x9b8>)
 80009e6:	f000 ff41 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2108      	movs	r1, #8
 80009ee:	488d      	ldr	r0, [pc, #564]	; (8000c24 <digital_clock+0x9b8>)
 80009f0:	f000 ff3c 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2110      	movs	r1, #16
 80009f8:	488a      	ldr	r0, [pc, #552]	; (8000c24 <digital_clock+0x9b8>)
 80009fa:	f000 ff37 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2120      	movs	r1, #32
 8000a02:	4888      	ldr	r0, [pc, #544]	; (8000c24 <digital_clock+0x9b8>)
 8000a04:	f000 ff32 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	4885      	ldr	r0, [pc, #532]	; (8000c24 <digital_clock+0x9b8>)
 8000a0e:	f000 ff2d 	bl	800186c <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 3){
 8000a12:	4b83      	ldr	r3, [pc, #524]	; (8000c20 <digital_clock+0x9b4>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d122      	bne.n	8000a60 <digital_clock+0x7f4>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4881      	ldr	r0, [pc, #516]	; (8000c24 <digital_clock+0x9b8>)
 8000a20:	f000 ff24 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2102      	movs	r1, #2
 8000a28:	487e      	ldr	r0, [pc, #504]	; (8000c24 <digital_clock+0x9b8>)
 8000a2a:	f000 ff1f 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2104      	movs	r1, #4
 8000a32:	487c      	ldr	r0, [pc, #496]	; (8000c24 <digital_clock+0x9b8>)
 8000a34:	f000 ff1a 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2108      	movs	r1, #8
 8000a3c:	4879      	ldr	r0, [pc, #484]	; (8000c24 <digital_clock+0x9b8>)
 8000a3e:	f000 ff15 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2110      	movs	r1, #16
 8000a46:	4877      	ldr	r0, [pc, #476]	; (8000c24 <digital_clock+0x9b8>)
 8000a48:	f000 ff10 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2120      	movs	r1, #32
 8000a50:	4874      	ldr	r0, [pc, #464]	; (8000c24 <digital_clock+0x9b8>)
 8000a52:	f000 ff0b 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2140      	movs	r1, #64	; 0x40
 8000a5a:	4872      	ldr	r0, [pc, #456]	; (8000c24 <digital_clock+0x9b8>)
 8000a5c:	f000 ff06 	bl	800186c <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 4){
 8000a60:	4b6f      	ldr	r3, [pc, #444]	; (8000c20 <digital_clock+0x9b4>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d122      	bne.n	8000aae <digital_clock+0x842>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	486d      	ldr	r0, [pc, #436]	; (8000c24 <digital_clock+0x9b8>)
 8000a6e:	f000 fefd 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2102      	movs	r1, #2
 8000a76:	486b      	ldr	r0, [pc, #428]	; (8000c24 <digital_clock+0x9b8>)
 8000a78:	f000 fef8 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2104      	movs	r1, #4
 8000a80:	4868      	ldr	r0, [pc, #416]	; (8000c24 <digital_clock+0x9b8>)
 8000a82:	f000 fef3 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	2108      	movs	r1, #8
 8000a8a:	4866      	ldr	r0, [pc, #408]	; (8000c24 <digital_clock+0x9b8>)
 8000a8c:	f000 feee 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2110      	movs	r1, #16
 8000a94:	4863      	ldr	r0, [pc, #396]	; (8000c24 <digital_clock+0x9b8>)
 8000a96:	f000 fee9 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	4861      	ldr	r0, [pc, #388]	; (8000c24 <digital_clock+0x9b8>)
 8000aa0:	f000 fee4 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	485e      	ldr	r0, [pc, #376]	; (8000c24 <digital_clock+0x9b8>)
 8000aaa:	f000 fedf 	bl	800186c <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 5){
 8000aae:	4b5c      	ldr	r3, [pc, #368]	; (8000c20 <digital_clock+0x9b4>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	2b05      	cmp	r3, #5
 8000ab4:	d122      	bne.n	8000afc <digital_clock+0x890>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2101      	movs	r1, #1
 8000aba:	485a      	ldr	r0, [pc, #360]	; (8000c24 <digital_clock+0x9b8>)
 8000abc:	f000 fed6 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	4857      	ldr	r0, [pc, #348]	; (8000c24 <digital_clock+0x9b8>)
 8000ac6:	f000 fed1 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2104      	movs	r1, #4
 8000ace:	4855      	ldr	r0, [pc, #340]	; (8000c24 <digital_clock+0x9b8>)
 8000ad0:	f000 fecc 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2108      	movs	r1, #8
 8000ad8:	4852      	ldr	r0, [pc, #328]	; (8000c24 <digital_clock+0x9b8>)
 8000ada:	f000 fec7 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	4850      	ldr	r0, [pc, #320]	; (8000c24 <digital_clock+0x9b8>)
 8000ae4:	f000 fec2 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2120      	movs	r1, #32
 8000aec:	484d      	ldr	r0, [pc, #308]	; (8000c24 <digital_clock+0x9b8>)
 8000aee:	f000 febd 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2140      	movs	r1, #64	; 0x40
 8000af6:	484b      	ldr	r0, [pc, #300]	; (8000c24 <digital_clock+0x9b8>)
 8000af8:	f000 feb8 	bl	800186c <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 6){
 8000afc:	4b48      	ldr	r3, [pc, #288]	; (8000c20 <digital_clock+0x9b4>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2b06      	cmp	r3, #6
 8000b02:	d122      	bne.n	8000b4a <digital_clock+0x8de>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2101      	movs	r1, #1
 8000b08:	4846      	ldr	r0, [pc, #280]	; (8000c24 <digital_clock+0x9b8>)
 8000b0a:	f000 feaf 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2102      	movs	r1, #2
 8000b12:	4844      	ldr	r0, [pc, #272]	; (8000c24 <digital_clock+0x9b8>)
 8000b14:	f000 feaa 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	4841      	ldr	r0, [pc, #260]	; (8000c24 <digital_clock+0x9b8>)
 8000b1e:	f000 fea5 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2108      	movs	r1, #8
 8000b26:	483f      	ldr	r0, [pc, #252]	; (8000c24 <digital_clock+0x9b8>)
 8000b28:	f000 fea0 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2110      	movs	r1, #16
 8000b30:	483c      	ldr	r0, [pc, #240]	; (8000c24 <digital_clock+0x9b8>)
 8000b32:	f000 fe9b 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2120      	movs	r1, #32
 8000b3a:	483a      	ldr	r0, [pc, #232]	; (8000c24 <digital_clock+0x9b8>)
 8000b3c:	f000 fe96 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2140      	movs	r1, #64	; 0x40
 8000b44:	4837      	ldr	r0, [pc, #220]	; (8000c24 <digital_clock+0x9b8>)
 8000b46:	f000 fe91 	bl	800186c <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 7){
 8000b4a:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <digital_clock+0x9b4>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2b07      	cmp	r3, #7
 8000b50:	d122      	bne.n	8000b98 <digital_clock+0x92c>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2101      	movs	r1, #1
 8000b56:	4833      	ldr	r0, [pc, #204]	; (8000c24 <digital_clock+0x9b8>)
 8000b58:	f000 fe88 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2102      	movs	r1, #2
 8000b60:	4830      	ldr	r0, [pc, #192]	; (8000c24 <digital_clock+0x9b8>)
 8000b62:	f000 fe83 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2104      	movs	r1, #4
 8000b6a:	482e      	ldr	r0, [pc, #184]	; (8000c24 <digital_clock+0x9b8>)
 8000b6c:	f000 fe7e 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2108      	movs	r1, #8
 8000b74:	482b      	ldr	r0, [pc, #172]	; (8000c24 <digital_clock+0x9b8>)
 8000b76:	f000 fe79 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	4829      	ldr	r0, [pc, #164]	; (8000c24 <digital_clock+0x9b8>)
 8000b80:	f000 fe74 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2120      	movs	r1, #32
 8000b88:	4826      	ldr	r0, [pc, #152]	; (8000c24 <digital_clock+0x9b8>)
 8000b8a:	f000 fe6f 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2140      	movs	r1, #64	; 0x40
 8000b92:	4824      	ldr	r0, [pc, #144]	; (8000c24 <digital_clock+0x9b8>)
 8000b94:	f000 fe6a 	bl	800186c <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 8){
 8000b98:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <digital_clock+0x9b4>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	2b08      	cmp	r3, #8
 8000b9e:	d122      	bne.n	8000be6 <digital_clock+0x97a>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	481f      	ldr	r0, [pc, #124]	; (8000c24 <digital_clock+0x9b8>)
 8000ba6:	f000 fe61 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2102      	movs	r1, #2
 8000bae:	481d      	ldr	r0, [pc, #116]	; (8000c24 <digital_clock+0x9b8>)
 8000bb0:	f000 fe5c 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2104      	movs	r1, #4
 8000bb8:	481a      	ldr	r0, [pc, #104]	; (8000c24 <digital_clock+0x9b8>)
 8000bba:	f000 fe57 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	4818      	ldr	r0, [pc, #96]	; (8000c24 <digital_clock+0x9b8>)
 8000bc4:	f000 fe52 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4815      	ldr	r0, [pc, #84]	; (8000c24 <digital_clock+0x9b8>)
 8000bce:	f000 fe4d 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	4813      	ldr	r0, [pc, #76]	; (8000c24 <digital_clock+0x9b8>)
 8000bd8:	f000 fe48 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2140      	movs	r1, #64	; 0x40
 8000be0:	4810      	ldr	r0, [pc, #64]	; (8000c24 <digital_clock+0x9b8>)
 8000be2:	f000 fe43 	bl	800186c <HAL_GPIO_WritePin>
	 		 }
	 		 if(led_buffer[2] == 9){
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <digital_clock+0x9b4>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	2b09      	cmp	r3, #9
 8000bec:	d129      	bne.n	8000c42 <digital_clock+0x9d6>
	 			 HAL_GPIO_WritePin(SEG3_A_GPIO_Port, SEG3_A_Pin, RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	480c      	ldr	r0, [pc, #48]	; (8000c24 <digital_clock+0x9b8>)
 8000bf4:	f000 fe3a 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_B_GPIO_Port, SEG3_B_Pin, RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <digital_clock+0x9b8>)
 8000bfe:	f000 fe35 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_C_GPIO_Port, SEG3_C_Pin, RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2104      	movs	r1, #4
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <digital_clock+0x9b8>)
 8000c08:	f000 fe30 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_D_GPIO_Port, SEG3_D_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2108      	movs	r1, #8
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <digital_clock+0x9b8>)
 8000c12:	f000 fe2b 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_E_GPIO_Port, SEG3_E_Pin, SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2110      	movs	r1, #16
 8000c1a:	e005      	b.n	8000c28 <digital_clock+0x9bc>
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	2000000c 	.word	0x2000000c
 8000c24:	40010c00 	.word	0x40010c00
 8000c28:	48cf      	ldr	r0, [pc, #828]	; (8000f68 <digital_clock+0xcfc>)
 8000c2a:	f000 fe1f 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_F_GPIO_Port, SEG3_F_Pin, RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2120      	movs	r1, #32
 8000c32:	48cd      	ldr	r0, [pc, #820]	; (8000f68 <digital_clock+0xcfc>)
 8000c34:	f000 fe1a 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_G_GPIO_Port, SEG3_G_Pin, RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2140      	movs	r1, #64	; 0x40
 8000c3c:	48ca      	ldr	r0, [pc, #808]	; (8000f68 <digital_clock+0xcfc>)
 8000c3e:	f000 fe15 	bl	800186c <HAL_GPIO_WritePin>
	 		 }

 // Display the forth 7 SEG with led_buffer [3]
	 		if(led_buffer[3] == 0){
 8000c42:	4bca      	ldr	r3, [pc, #808]	; (8000f6c <digital_clock+0xd00>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d128      	bne.n	8000c9c <digital_clock+0xa30>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	48c6      	ldr	r0, [pc, #792]	; (8000f68 <digital_clock+0xcfc>)
 8000c50:	f000 fe0c 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5a:	48c3      	ldr	r0, [pc, #780]	; (8000f68 <digital_clock+0xcfc>)
 8000c5c:	f000 fe06 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c66:	48c0      	ldr	r0, [pc, #768]	; (8000f68 <digital_clock+0xcfc>)
 8000c68:	f000 fe00 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c72:	48bd      	ldr	r0, [pc, #756]	; (8000f68 <digital_clock+0xcfc>)
 8000c74:	f000 fdfa 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c7e:	48ba      	ldr	r0, [pc, #744]	; (8000f68 <digital_clock+0xcfc>)
 8000c80:	f000 fdf4 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8a:	48b7      	ldr	r0, [pc, #732]	; (8000f68 <digital_clock+0xcfc>)
 8000c8c:	f000 fdee 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c96:	48b4      	ldr	r0, [pc, #720]	; (8000f68 <digital_clock+0xcfc>)
 8000c98:	f000 fde8 	bl	800186c <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 1){
 8000c9c:	4bb3      	ldr	r3, [pc, #716]	; (8000f6c <digital_clock+0xd00>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d128      	bne.n	8000cf6 <digital_clock+0xa8a>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	48af      	ldr	r0, [pc, #700]	; (8000f68 <digital_clock+0xcfc>)
 8000caa:	f000 fddf 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb4:	48ac      	ldr	r0, [pc, #688]	; (8000f68 <digital_clock+0xcfc>)
 8000cb6:	f000 fdd9 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc0:	48a9      	ldr	r0, [pc, #676]	; (8000f68 <digital_clock+0xcfc>)
 8000cc2:	f000 fdd3 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ccc:	48a6      	ldr	r0, [pc, #664]	; (8000f68 <digital_clock+0xcfc>)
 8000cce:	f000 fdcd 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd8:	48a3      	ldr	r0, [pc, #652]	; (8000f68 <digital_clock+0xcfc>)
 8000cda:	f000 fdc7 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce4:	48a0      	ldr	r0, [pc, #640]	; (8000f68 <digital_clock+0xcfc>)
 8000ce6:	f000 fdc1 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf0:	489d      	ldr	r0, [pc, #628]	; (8000f68 <digital_clock+0xcfc>)
 8000cf2:	f000 fdbb 	bl	800186c <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 2){
 8000cf6:	4b9d      	ldr	r3, [pc, #628]	; (8000f6c <digital_clock+0xd00>)
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d128      	bne.n	8000d50 <digital_clock+0xae4>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	4899      	ldr	r0, [pc, #612]	; (8000f68 <digital_clock+0xcfc>)
 8000d04:	f000 fdb2 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0e:	4896      	ldr	r0, [pc, #600]	; (8000f68 <digital_clock+0xcfc>)
 8000d10:	f000 fdac 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1a:	4893      	ldr	r0, [pc, #588]	; (8000f68 <digital_clock+0xcfc>)
 8000d1c:	f000 fda6 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d26:	4890      	ldr	r0, [pc, #576]	; (8000f68 <digital_clock+0xcfc>)
 8000d28:	f000 fda0 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d32:	488d      	ldr	r0, [pc, #564]	; (8000f68 <digital_clock+0xcfc>)
 8000d34:	f000 fd9a 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3e:	488a      	ldr	r0, [pc, #552]	; (8000f68 <digital_clock+0xcfc>)
 8000d40:	f000 fd94 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4a:	4887      	ldr	r0, [pc, #540]	; (8000f68 <digital_clock+0xcfc>)
 8000d4c:	f000 fd8e 	bl	800186c <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 3){
 8000d50:	4b86      	ldr	r3, [pc, #536]	; (8000f6c <digital_clock+0xd00>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d128      	bne.n	8000daa <digital_clock+0xb3e>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2180      	movs	r1, #128	; 0x80
 8000d5c:	4882      	ldr	r0, [pc, #520]	; (8000f68 <digital_clock+0xcfc>)
 8000d5e:	f000 fd85 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d68:	487f      	ldr	r0, [pc, #508]	; (8000f68 <digital_clock+0xcfc>)
 8000d6a:	f000 fd7f 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d74:	487c      	ldr	r0, [pc, #496]	; (8000f68 <digital_clock+0xcfc>)
 8000d76:	f000 fd79 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d80:	4879      	ldr	r0, [pc, #484]	; (8000f68 <digital_clock+0xcfc>)
 8000d82:	f000 fd73 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8c:	4876      	ldr	r0, [pc, #472]	; (8000f68 <digital_clock+0xcfc>)
 8000d8e:	f000 fd6d 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	4873      	ldr	r0, [pc, #460]	; (8000f68 <digital_clock+0xcfc>)
 8000d9a:	f000 fd67 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da4:	4870      	ldr	r0, [pc, #448]	; (8000f68 <digital_clock+0xcfc>)
 8000da6:	f000 fd61 	bl	800186c <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 4){
 8000daa:	4b70      	ldr	r3, [pc, #448]	; (8000f6c <digital_clock+0xd00>)
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	d128      	bne.n	8000e04 <digital_clock+0xb98>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	486c      	ldr	r0, [pc, #432]	; (8000f68 <digital_clock+0xcfc>)
 8000db8:	f000 fd58 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc2:	4869      	ldr	r0, [pc, #420]	; (8000f68 <digital_clock+0xcfc>)
 8000dc4:	f000 fd52 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dce:	4866      	ldr	r0, [pc, #408]	; (8000f68 <digital_clock+0xcfc>)
 8000dd0:	f000 fd4c 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dda:	4863      	ldr	r0, [pc, #396]	; (8000f68 <digital_clock+0xcfc>)
 8000ddc:	f000 fd46 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de6:	4860      	ldr	r0, [pc, #384]	; (8000f68 <digital_clock+0xcfc>)
 8000de8:	f000 fd40 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df2:	485d      	ldr	r0, [pc, #372]	; (8000f68 <digital_clock+0xcfc>)
 8000df4:	f000 fd3a 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfe:	485a      	ldr	r0, [pc, #360]	; (8000f68 <digital_clock+0xcfc>)
 8000e00:	f000 fd34 	bl	800186c <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 5){
 8000e04:	4b59      	ldr	r3, [pc, #356]	; (8000f6c <digital_clock+0xd00>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	2b05      	cmp	r3, #5
 8000e0a:	d128      	bne.n	8000e5e <digital_clock+0xbf2>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	4855      	ldr	r0, [pc, #340]	; (8000f68 <digital_clock+0xcfc>)
 8000e12:	f000 fd2b 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4852      	ldr	r0, [pc, #328]	; (8000f68 <digital_clock+0xcfc>)
 8000e1e:	f000 fd25 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e28:	484f      	ldr	r0, [pc, #316]	; (8000f68 <digital_clock+0xcfc>)
 8000e2a:	f000 fd1f 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e34:	484c      	ldr	r0, [pc, #304]	; (8000f68 <digital_clock+0xcfc>)
 8000e36:	f000 fd19 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e40:	4849      	ldr	r0, [pc, #292]	; (8000f68 <digital_clock+0xcfc>)
 8000e42:	f000 fd13 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4c:	4846      	ldr	r0, [pc, #280]	; (8000f68 <digital_clock+0xcfc>)
 8000e4e:	f000 fd0d 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e58:	4843      	ldr	r0, [pc, #268]	; (8000f68 <digital_clock+0xcfc>)
 8000e5a:	f000 fd07 	bl	800186c <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 6){
 8000e5e:	4b43      	ldr	r3, [pc, #268]	; (8000f6c <digital_clock+0xd00>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d128      	bne.n	8000eb8 <digital_clock+0xc4c>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	483f      	ldr	r0, [pc, #252]	; (8000f68 <digital_clock+0xcfc>)
 8000e6c:	f000 fcfe 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e76:	483c      	ldr	r0, [pc, #240]	; (8000f68 <digital_clock+0xcfc>)
 8000e78:	f000 fcf8 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e82:	4839      	ldr	r0, [pc, #228]	; (8000f68 <digital_clock+0xcfc>)
 8000e84:	f000 fcf2 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8e:	4836      	ldr	r0, [pc, #216]	; (8000f68 <digital_clock+0xcfc>)
 8000e90:	f000 fcec 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e9a:	4833      	ldr	r0, [pc, #204]	; (8000f68 <digital_clock+0xcfc>)
 8000e9c:	f000 fce6 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea6:	4830      	ldr	r0, [pc, #192]	; (8000f68 <digital_clock+0xcfc>)
 8000ea8:	f000 fce0 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb2:	482d      	ldr	r0, [pc, #180]	; (8000f68 <digital_clock+0xcfc>)
 8000eb4:	f000 fcda 	bl	800186c <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 7){
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <digital_clock+0xd00>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	2b07      	cmp	r3, #7
 8000ebe:	d128      	bne.n	8000f12 <digital_clock+0xca6>
	 			 HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4828      	ldr	r0, [pc, #160]	; (8000f68 <digital_clock+0xcfc>)
 8000ec6:	f000 fcd1 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed0:	4825      	ldr	r0, [pc, #148]	; (8000f68 <digital_clock+0xcfc>)
 8000ed2:	f000 fccb 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000edc:	4822      	ldr	r0, [pc, #136]	; (8000f68 <digital_clock+0xcfc>)
 8000ede:	f000 fcc5 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee8:	481f      	ldr	r0, [pc, #124]	; (8000f68 <digital_clock+0xcfc>)
 8000eea:	f000 fcbf 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef4:	481c      	ldr	r0, [pc, #112]	; (8000f68 <digital_clock+0xcfc>)
 8000ef6:	f000 fcb9 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f00:	4819      	ldr	r0, [pc, #100]	; (8000f68 <digital_clock+0xcfc>)
 8000f02:	f000 fcb3 	bl	800186c <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0c:	4816      	ldr	r0, [pc, #88]	; (8000f68 <digital_clock+0xcfc>)
 8000f0e:	f000 fcad 	bl	800186c <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 8){
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <digital_clock+0xd00>)
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d12d      	bne.n	8000f76 <digital_clock+0xd0a>
	 			HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	4812      	ldr	r0, [pc, #72]	; (8000f68 <digital_clock+0xcfc>)
 8000f20:	f000 fca4 	bl	800186c <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2a:	480f      	ldr	r0, [pc, #60]	; (8000f68 <digital_clock+0xcfc>)
 8000f2c:	f000 fc9e 	bl	800186c <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f36:	480c      	ldr	r0, [pc, #48]	; (8000f68 <digital_clock+0xcfc>)
 8000f38:	f000 fc98 	bl	800186c <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f42:	4809      	ldr	r0, [pc, #36]	; (8000f68 <digital_clock+0xcfc>)
 8000f44:	f000 fc92 	bl	800186c <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <digital_clock+0xcfc>)
 8000f50:	f000 fc8c 	bl	800186c <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f5a:	4803      	ldr	r0, [pc, #12]	; (8000f68 <digital_clock+0xcfc>)
 8000f5c:	f000 fc86 	bl	800186c <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f66:	e003      	b.n	8000f70 <digital_clock+0xd04>
 8000f68:	40010c00 	.word	0x40010c00
 8000f6c:	2000000c 	.word	0x2000000c
 8000f70:	4818      	ldr	r0, [pc, #96]	; (8000fd4 <digital_clock+0xd68>)
 8000f72:	f000 fc7b 	bl	800186c <HAL_GPIO_WritePin>
	 		}
	 		if(led_buffer[3] == 9){
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <digital_clock+0xd6c>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b09      	cmp	r3, #9
 8000f7c:	d128      	bne.n	8000fd0 <digital_clock+0xd64>
	 			HAL_GPIO_WritePin(SEG4_A_GPIO_Port, SEG4_A_Pin, RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <digital_clock+0xd68>)
 8000f84:	f000 fc72 	bl	800186c <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_B_GPIO_Port, SEG4_B_Pin, RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8e:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <digital_clock+0xd68>)
 8000f90:	f000 fc6c 	bl	800186c <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_C_GPIO_Port, SEG4_C_Pin, RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9a:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <digital_clock+0xd68>)
 8000f9c:	f000 fc66 	bl	800186c <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_D_GPIO_Port, SEG4_D_Pin, RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa6:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <digital_clock+0xd68>)
 8000fa8:	f000 fc60 	bl	800186c <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_E_GPIO_Port, SEG4_E_Pin, SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb2:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <digital_clock+0xd68>)
 8000fb4:	f000 fc5a 	bl	800186c <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_F_GPIO_Port, SEG4_F_Pin, RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <digital_clock+0xd68>)
 8000fc0:	f000 fc54 	bl	800186c <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_G_GPIO_Port, SEG4_G_Pin, RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fca:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <digital_clock+0xd68>)
 8000fcc:	f000 fc4e 	bl	800186c <HAL_GPIO_WritePin>
	 		}
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40010c00 	.word	0x40010c00
 8000fd8:	2000000c 	.word	0x2000000c

08000fdc <main>:
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe0:	f000 f960 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe4:	f000 f840 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe8:	f000 f87a 	bl	80010e0 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  second ++;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <main+0x7c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a19      	ldr	r2, [pc, #100]	; (8001058 <main+0x7c>)
 8000ff4:	6013      	str	r3, [r2, #0]
	  if ( second >= 60) {
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <main+0x7c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b3b      	cmp	r3, #59	; 0x3b
 8000ffc:	dd07      	ble.n	800100e <main+0x32>
	   second = 0;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <main+0x7c>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
	   minute ++;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <main+0x80>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a14      	ldr	r2, [pc, #80]	; (800105c <main+0x80>)
 800100c:	6013      	str	r3, [r2, #0]
	  }
	  if( minute >= 60) {
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <main+0x80>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b3b      	cmp	r3, #59	; 0x3b
 8001014:	dd07      	ble.n	8001026 <main+0x4a>
	  minute = 0;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <main+0x80>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
	  hour ++;
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <main+0x84>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <main+0x84>)
 8001024:	6013      	str	r3, [r2, #0]
	  }
	  if( hour >=24) {
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <main+0x84>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b17      	cmp	r3, #23
 800102c:	dd02      	ble.n	8001034 <main+0x58>
	  hour = 0;
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <main+0x84>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	  }
	  updateClockBuffer () ;
 8001034:	f7ff f88a 	bl	800014c <updateClockBuffer>
	  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8001038:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <main+0x88>)
 800103e:	f000 fc2d 	bl	800189c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001042:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001046:	4807      	ldr	r0, [pc, #28]	; (8001064 <main+0x88>)
 8001048:	f000 fc28 	bl	800189c <HAL_GPIO_TogglePin>
	  digital_clock();
 800104c:	f7ff f90e 	bl	800026c <digital_clock>
	  HAL_Delay (10) ;
 8001050:	200a      	movs	r0, #10
 8001052:	f000 f989 	bl	8001368 <HAL_Delay>
	  second ++;
 8001056:	e7c9      	b.n	8000fec <main+0x10>
 8001058:	20000008 	.word	0x20000008
 800105c:	20000004 	.word	0x20000004
 8001060:	20000000 	.word	0x20000000
 8001064:	40010c00 	.word	0x40010c00

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b090      	sub	sp, #64	; 0x40
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0318 	add.w	r3, r7, #24
 8001072:	2228      	movs	r2, #40	; 0x28
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f001 f836 	bl	80020e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108e:	2301      	movs	r3, #1
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001092:	2310      	movs	r3, #16
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001096:	2300      	movs	r3, #0
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109a:	f107 0318 	add.w	r3, r7, #24
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fc16 	bl	80018d0 <HAL_RCC_OscConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010aa:	f000 f86f 	bl	800118c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ae:	230f      	movs	r3, #15
 80010b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fe82 	bl	8001dd0 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010d2:	f000 f85b 	bl	800118c <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3740      	adds	r7, #64	; 0x40
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <MX_GPIO_Init+0xa0>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <MX_GPIO_Init+0xa0>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <MX_GPIO_Init+0xa0>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_GPIO_Init+0xa0>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <MX_GPIO_Init+0xa0>)
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_GPIO_Init+0xa0>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG1_A_Pin|SEG1_B_Pin|SEG1_C_Pin|SEG1_D_Pin
 8001124:	2200      	movs	r2, #0
 8001126:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800112a:	4816      	ldr	r0, [pc, #88]	; (8001184 <MX_GPIO_Init+0xa4>)
 800112c:	f000 fb9e 	bl	800186c <HAL_GPIO_WritePin>
                          |SEG1_E_Pin|SEG1_F_Pin|SEG1_G_Pin|SEG2_A_Pin
                          |SEG2_B_Pin|SEG2_C_Pin|SEG2_D_Pin|SEG2_E_Pin
                          |SEG2_F_Pin|SEG2_G_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG3_A_Pin|SEG3_B_Pin|SEG3_C_Pin|SEG4_D_Pin
 8001130:	2200      	movs	r2, #0
 8001132:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001136:	4814      	ldr	r0, [pc, #80]	; (8001188 <MX_GPIO_Init+0xa8>)
 8001138:	f000 fb98 	bl	800186c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG1_A_Pin SEG1_B_Pin SEG1_C_Pin SEG1_D_Pin
                           SEG1_E_Pin SEG1_F_Pin SEG1_G_Pin SEG2_A_Pin
                           SEG2_B_Pin SEG2_C_Pin SEG2_D_Pin SEG2_E_Pin
                           SEG2_F_Pin SEG2_G_Pin EN_Pin */
  GPIO_InitStruct.Pin = SEG1_A_Pin|SEG1_B_Pin|SEG1_C_Pin|SEG1_D_Pin
 800113c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001140:	60bb      	str	r3, [r7, #8]
                          |SEG1_E_Pin|SEG1_F_Pin|SEG1_G_Pin|SEG2_A_Pin
                          |SEG2_B_Pin|SEG2_C_Pin|SEG2_D_Pin|SEG2_E_Pin
                          |SEG2_F_Pin|SEG2_G_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2302      	movs	r3, #2
 800114c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4619      	mov	r1, r3
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <MX_GPIO_Init+0xa4>)
 8001156:	f000 fa0f 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG3_A_Pin SEG3_B_Pin SEG3_C_Pin SEG4_D_Pin
                           SEG4_E_Pin SEG4_F_Pin SEG4_G_Pin LED_RED_Pin
                           DOT_Pin SEG3_D_Pin SEG3_E_Pin SEG3_F_Pin
                           SEG3_G_Pin SEG4_A_Pin SEG4_B_Pin SEG4_C_Pin */
  GPIO_InitStruct.Pin = SEG3_A_Pin|SEG3_B_Pin|SEG3_C_Pin|SEG4_D_Pin
 800115a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800115e:	60bb      	str	r3, [r7, #8]
                          |SEG4_E_Pin|SEG4_F_Pin|SEG4_G_Pin|LED_RED_Pin
                          |DOT_Pin|SEG3_D_Pin|SEG3_E_Pin|SEG3_F_Pin
                          |SEG3_G_Pin|SEG4_A_Pin|SEG4_B_Pin|SEG4_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2302      	movs	r3, #2
 800116a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	4619      	mov	r1, r3
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_GPIO_Init+0xa8>)
 8001174:	f000 fa00 	bl	8001578 <HAL_GPIO_Init>

}
 8001178:	bf00      	nop
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40021000 	.word	0x40021000
 8001184:	40010800 	.word	0x40010800
 8001188:	40010c00 	.word	0x40010c00

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
}
 8001192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001194:	e7fe      	b.n	8001194 <Error_Handler+0x8>
	...

08001198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_MspInit+0x5c>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <HAL_MspInit+0x5c>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6193      	str	r3, [r2, #24]
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_MspInit+0x5c>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_MspInit+0x5c>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <HAL_MspInit+0x5c>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	61d3      	str	r3, [r2, #28]
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_MspInit+0x5c>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_MspInit+0x60>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_MspInit+0x60>)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010000 	.word	0x40010000

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <NMI_Handler+0x4>

08001202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <MemManage_Handler+0x4>

0800120e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <UsageFault_Handler+0x4>

0800121a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001242:	f000 f875 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}

0800124a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
	...

08001258 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	; (8001290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	; (800129c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800127e:	f7ff ffe4 	bl	800124a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001282:	f000 ff0d 	bl	80020a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001286:	f7ff fea9 	bl	8000fdc <main>
  bx lr
 800128a:	4770      	bx	lr
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001294:	08002138 	.word	0x08002138
  ldr r2, =_sbss
 8001298:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800129c:	20000048 	.word	0x20000048

080012a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC1_2_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_Init+0x28>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a07      	ldr	r2, [pc, #28]	; (80012cc <HAL_Init+0x28>)
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b4:	2003      	movs	r0, #3
 80012b6:	f000 f92b 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ba:	200f      	movs	r0, #15
 80012bc:	f000 f808 	bl	80012d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c0:	f7ff ff6a 	bl	8001198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40022000 	.word	0x40022000

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_InitTick+0x54>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x58>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f935 	bl	800155e <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00e      	b.n	800131c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d80a      	bhi.n	800131a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f000 f90b 	bl	8001526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_InitTick+0x5c>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000001c 	.word	0x2000001c
 8001328:	20000024 	.word	0x20000024
 800132c:	20000020 	.word	0x20000020

08001330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_IncTick+0x1c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_IncTick+0x20>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a03      	ldr	r2, [pc, #12]	; (8001350 <HAL_IncTick+0x20>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	20000024 	.word	0x20000024
 8001350:	20000044 	.word	0x20000044

08001354 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return uwTick;
 8001358:	4b02      	ldr	r3, [pc, #8]	; (8001364 <HAL_GetTick+0x10>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	20000044 	.word	0x20000044

08001368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff fff0 	bl	8001354 <HAL_GetTick>
 8001374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	d005      	beq.n	800138e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_Delay+0x44>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800138e:	bf00      	nop
 8001390:	f7ff ffe0 	bl	8001354 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	429a      	cmp	r2, r3
 800139e:	d8f7      	bhi.n	8001390 <HAL_Delay+0x28>
  {
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000024 	.word	0x20000024

080013b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	60d3      	str	r3, [r2, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	; (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014dc:	d301      	bcc.n	80014e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014de:	2301      	movs	r3, #1
 80014e0:	e00f      	b.n	8001502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <SysTick_Config+0x40>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ea:	210f      	movs	r1, #15
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f7ff ff90 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <SysTick_Config+0x40>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <SysTick_Config+0x40>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	e000e010 	.word	0xe000e010

08001510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff49 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001538:	f7ff ff5e 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 800153c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7ff ff90 	bl	8001468 <NVIC_EncodePriority>
 8001548:	4602      	mov	r2, r0
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff5f 	bl	8001414 <__NVIC_SetPriority>
}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffb0 	bl	80014cc <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b08b      	sub	sp, #44	; 0x2c
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	e148      	b.n	800181e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800158c:	2201      	movs	r2, #1
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	f040 8137 	bne.w	8001818 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4aa3      	ldr	r2, [pc, #652]	; (800183c <HAL_GPIO_Init+0x2c4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d05e      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015b4:	4aa1      	ldr	r2, [pc, #644]	; (800183c <HAL_GPIO_Init+0x2c4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d875      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015ba:	4aa1      	ldr	r2, [pc, #644]	; (8001840 <HAL_GPIO_Init+0x2c8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d058      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015c0:	4a9f      	ldr	r2, [pc, #636]	; (8001840 <HAL_GPIO_Init+0x2c8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d86f      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015c6:	4a9f      	ldr	r2, [pc, #636]	; (8001844 <HAL_GPIO_Init+0x2cc>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d052      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015cc:	4a9d      	ldr	r2, [pc, #628]	; (8001844 <HAL_GPIO_Init+0x2cc>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d869      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015d2:	4a9d      	ldr	r2, [pc, #628]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d04c      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015d8:	4a9b      	ldr	r2, [pc, #620]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d863      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015de:	4a9b      	ldr	r2, [pc, #620]	; (800184c <HAL_GPIO_Init+0x2d4>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d046      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
 80015e4:	4a99      	ldr	r2, [pc, #612]	; (800184c <HAL_GPIO_Init+0x2d4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d85d      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015ea:	2b12      	cmp	r3, #18
 80015ec:	d82a      	bhi.n	8001644 <HAL_GPIO_Init+0xcc>
 80015ee:	2b12      	cmp	r3, #18
 80015f0:	d859      	bhi.n	80016a6 <HAL_GPIO_Init+0x12e>
 80015f2:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <HAL_GPIO_Init+0x80>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	08001673 	.word	0x08001673
 80015fc:	0800164d 	.word	0x0800164d
 8001600:	0800165f 	.word	0x0800165f
 8001604:	080016a1 	.word	0x080016a1
 8001608:	080016a7 	.word	0x080016a7
 800160c:	080016a7 	.word	0x080016a7
 8001610:	080016a7 	.word	0x080016a7
 8001614:	080016a7 	.word	0x080016a7
 8001618:	080016a7 	.word	0x080016a7
 800161c:	080016a7 	.word	0x080016a7
 8001620:	080016a7 	.word	0x080016a7
 8001624:	080016a7 	.word	0x080016a7
 8001628:	080016a7 	.word	0x080016a7
 800162c:	080016a7 	.word	0x080016a7
 8001630:	080016a7 	.word	0x080016a7
 8001634:	080016a7 	.word	0x080016a7
 8001638:	080016a7 	.word	0x080016a7
 800163c:	08001655 	.word	0x08001655
 8001640:	08001669 	.word	0x08001669
 8001644:	4a82      	ldr	r2, [pc, #520]	; (8001850 <HAL_GPIO_Init+0x2d8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d013      	beq.n	8001672 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800164a:	e02c      	b.n	80016a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	623b      	str	r3, [r7, #32]
          break;
 8001652:	e029      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	3304      	adds	r3, #4
 800165a:	623b      	str	r3, [r7, #32]
          break;
 800165c:	e024      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	3308      	adds	r3, #8
 8001664:	623b      	str	r3, [r7, #32]
          break;
 8001666:	e01f      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	330c      	adds	r3, #12
 800166e:	623b      	str	r3, [r7, #32]
          break;
 8001670:	e01a      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800167a:	2304      	movs	r3, #4
 800167c:	623b      	str	r3, [r7, #32]
          break;
 800167e:	e013      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d105      	bne.n	8001694 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001688:	2308      	movs	r3, #8
 800168a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	611a      	str	r2, [r3, #16]
          break;
 8001692:	e009      	b.n	80016a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001694:	2308      	movs	r3, #8
 8001696:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	615a      	str	r2, [r3, #20]
          break;
 800169e:	e003      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
          break;
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_Init+0x130>
          break;
 80016a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2bff      	cmp	r3, #255	; 0xff
 80016ac:	d801      	bhi.n	80016b2 <HAL_GPIO_Init+0x13a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	e001      	b.n	80016b6 <HAL_GPIO_Init+0x13e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3304      	adds	r3, #4
 80016b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2bff      	cmp	r3, #255	; 0xff
 80016bc:	d802      	bhi.n	80016c4 <HAL_GPIO_Init+0x14c>
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	e002      	b.n	80016ca <HAL_GPIO_Init+0x152>
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	3b08      	subs	r3, #8
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	210f      	movs	r1, #15
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	401a      	ands	r2, r3
 80016dc:	6a39      	ldr	r1, [r7, #32]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	431a      	orrs	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8090 	beq.w	8001818 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016f8:	4b56      	ldr	r3, [pc, #344]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a55      	ldr	r2, [pc, #340]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b53      	ldr	r3, [pc, #332]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001710:	4a51      	ldr	r2, [pc, #324]	; (8001858 <HAL_GPIO_Init+0x2e0>)
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a49      	ldr	r2, [pc, #292]	; (800185c <HAL_GPIO_Init+0x2e4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d00d      	beq.n	8001758 <HAL_GPIO_Init+0x1e0>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a48      	ldr	r2, [pc, #288]	; (8001860 <HAL_GPIO_Init+0x2e8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d007      	beq.n	8001754 <HAL_GPIO_Init+0x1dc>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a47      	ldr	r2, [pc, #284]	; (8001864 <HAL_GPIO_Init+0x2ec>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d101      	bne.n	8001750 <HAL_GPIO_Init+0x1d8>
 800174c:	2302      	movs	r3, #2
 800174e:	e004      	b.n	800175a <HAL_GPIO_Init+0x1e2>
 8001750:	2303      	movs	r3, #3
 8001752:	e002      	b.n	800175a <HAL_GPIO_Init+0x1e2>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <HAL_GPIO_Init+0x1e2>
 8001758:	2300      	movs	r3, #0
 800175a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800175c:	f002 0203 	and.w	r2, r2, #3
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	4093      	lsls	r3, r2
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800176a:	493b      	ldr	r1, [pc, #236]	; (8001858 <HAL_GPIO_Init+0x2e0>)
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001784:	4b38      	ldr	r3, [pc, #224]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4937      	ldr	r1, [pc, #220]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001792:	4b35      	ldr	r3, [pc, #212]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	43db      	mvns	r3, r3
 800179a:	4933      	ldr	r1, [pc, #204]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 800179c:	4013      	ands	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017ac:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	492d      	ldr	r1, [pc, #180]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ba:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4929      	ldr	r1, [pc, #164]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	4923      	ldr	r1, [pc, #140]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017e2:	4b21      	ldr	r3, [pc, #132]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	491f      	ldr	r1, [pc, #124]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	4919      	ldr	r1, [pc, #100]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	60cb      	str	r3, [r1, #12]
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	43db      	mvns	r3, r3
 8001812:	4915      	ldr	r1, [pc, #84]	; (8001868 <HAL_GPIO_Init+0x2f0>)
 8001814:	4013      	ands	r3, r2
 8001816:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	3301      	adds	r3, #1
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	f47f aeaf 	bne.w	800158c <HAL_GPIO_Init+0x14>
  }
}
 800182e:	bf00      	nop
 8001830:	bf00      	nop
 8001832:	372c      	adds	r7, #44	; 0x2c
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	10320000 	.word	0x10320000
 8001840:	10310000 	.word	0x10310000
 8001844:	10220000 	.word	0x10220000
 8001848:	10210000 	.word	0x10210000
 800184c:	10120000 	.word	0x10120000
 8001850:	10110000 	.word	0x10110000
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000
 800185c:	40010800 	.word	0x40010800
 8001860:	40010c00 	.word	0x40010c00
 8001864:	40011000 	.word	0x40011000
 8001868:	40010400 	.word	0x40010400

0800186c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
 8001878:	4613      	mov	r3, r2
 800187a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800187c:	787b      	ldrb	r3, [r7, #1]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001882:	887a      	ldrh	r2, [r7, #2]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001888:	e003      	b.n	8001892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	041a      	lsls	r2, r3, #16
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	611a      	str	r2, [r3, #16]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018ae:	887a      	ldrh	r2, [r7, #2]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4013      	ands	r3, r2
 80018b4:	041a      	lsls	r2, r3, #16
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	43d9      	mvns	r1, r3
 80018ba:	887b      	ldrh	r3, [r7, #2]
 80018bc:	400b      	ands	r3, r1
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	611a      	str	r2, [r3, #16]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
	...

080018d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e26c      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8087 	beq.w	80019fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f0:	4b92      	ldr	r3, [pc, #584]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d00c      	beq.n	8001916 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018fc:	4b8f      	ldr	r3, [pc, #572]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b08      	cmp	r3, #8
 8001906:	d112      	bne.n	800192e <HAL_RCC_OscConfig+0x5e>
 8001908:	4b8c      	ldr	r3, [pc, #560]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001914:	d10b      	bne.n	800192e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001916:	4b89      	ldr	r3, [pc, #548]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d06c      	beq.n	80019fc <HAL_RCC_OscConfig+0x12c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d168      	bne.n	80019fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e246      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x76>
 8001938:	4b80      	ldr	r3, [pc, #512]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a7f      	ldr	r2, [pc, #508]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800193e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	e02e      	b.n	80019a4 <HAL_RCC_OscConfig+0xd4>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x98>
 800194e:	4b7b      	ldr	r3, [pc, #492]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a7a      	ldr	r2, [pc, #488]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b78      	ldr	r3, [pc, #480]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a77      	ldr	r2, [pc, #476]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e01d      	b.n	80019a4 <HAL_RCC_OscConfig+0xd4>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0xbc>
 8001972:	4b72      	ldr	r3, [pc, #456]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a71      	ldr	r2, [pc, #452]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	4b6f      	ldr	r3, [pc, #444]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a6e      	ldr	r2, [pc, #440]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e00b      	b.n	80019a4 <HAL_RCC_OscConfig+0xd4>
 800198c:	4b6b      	ldr	r3, [pc, #428]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a6a      	ldr	r2, [pc, #424]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a67      	ldr	r2, [pc, #412]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 800199e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d013      	beq.n	80019d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fcd2 	bl	8001354 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b4:	f7ff fcce 	bl	8001354 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e1fa      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	4b5d      	ldr	r3, [pc, #372]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCC_OscConfig+0xe4>
 80019d2:	e014      	b.n	80019fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fcbe 	bl	8001354 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff fcba 	bl	8001354 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	; 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e1e6      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ee:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x10c>
 80019fa:	e000      	b.n	80019fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d063      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a0a:	4b4c      	ldr	r3, [pc, #304]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00b      	beq.n	8001a2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a16:	4b49      	ldr	r3, [pc, #292]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d11c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x18c>
 8001a22:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d116      	bne.n	8001a5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2e:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d005      	beq.n	8001a46 <HAL_RCC_OscConfig+0x176>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d001      	beq.n	8001a46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e1ba      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a46:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4939      	ldr	r1, [pc, #228]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5a:	e03a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d020      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a64:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6a:	f7ff fc73 	bl	8001354 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a72:	f7ff fc6f 	bl	8001354 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e19b      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a90:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4927      	ldr	r1, [pc, #156]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
 8001aa4:	e015      	b.n	8001ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff fc52 	bl	8001354 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fc4e 	bl	8001354 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e17a      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d03a      	beq.n	8001b54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d019      	beq.n	8001b1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aec:	f7ff fc32 	bl	8001354 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af4:	f7ff fc2e 	bl	8001354 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e15a      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_RCC_OscConfig+0x26c>)
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f000 faa6 	bl	8002064 <RCC_Delay>
 8001b18:	e01c      	b.n	8001b54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7ff fc18 	bl	8001354 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b26:	e00f      	b.n	8001b48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7ff fc14 	bl	8001354 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d908      	bls.n	8001b48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e140      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	42420000 	.word	0x42420000
 8001b44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	4b9e      	ldr	r3, [pc, #632]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e9      	bne.n	8001b28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80a6 	beq.w	8001cae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b66:	4b97      	ldr	r3, [pc, #604]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10d      	bne.n	8001b8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	4b94      	ldr	r3, [pc, #592]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a93      	ldr	r2, [pc, #588]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	61d3      	str	r3, [r2, #28]
 8001b7e:	4b91      	ldr	r3, [pc, #580]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8e:	4b8e      	ldr	r3, [pc, #568]	; (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d118      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9a:	4b8b      	ldr	r3, [pc, #556]	; (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a8a      	ldr	r2, [pc, #552]	; (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fbd5 	bl	8001354 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bae:	f7ff fbd1 	bl	8001354 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b64      	cmp	r3, #100	; 0x64
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0fd      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	4b81      	ldr	r3, [pc, #516]	; (8001dc8 <HAL_RCC_OscConfig+0x4f8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x312>
 8001bd4:	4b7b      	ldr	r3, [pc, #492]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4a7a      	ldr	r2, [pc, #488]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6213      	str	r3, [r2, #32]
 8001be0:	e02d      	b.n	8001c3e <HAL_RCC_OscConfig+0x36e>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x334>
 8001bea:	4b76      	ldr	r3, [pc, #472]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a75      	ldr	r2, [pc, #468]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6213      	str	r3, [r2, #32]
 8001bf6:	4b73      	ldr	r3, [pc, #460]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a72      	ldr	r2, [pc, #456]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	e01c      	b.n	8001c3e <HAL_RCC_OscConfig+0x36e>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d10c      	bne.n	8001c26 <HAL_RCC_OscConfig+0x356>
 8001c0c:	4b6d      	ldr	r3, [pc, #436]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4a6c      	ldr	r2, [pc, #432]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	6213      	str	r3, [r2, #32]
 8001c18:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a69      	ldr	r2, [pc, #420]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	e00b      	b.n	8001c3e <HAL_RCC_OscConfig+0x36e>
 8001c26:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a66      	ldr	r2, [pc, #408]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6213      	str	r3, [r2, #32]
 8001c32:	4b64      	ldr	r3, [pc, #400]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a63      	ldr	r2, [pc, #396]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d015      	beq.n	8001c72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7ff fb85 	bl	8001354 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	f7ff fb81 	bl	8001354 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e0ab      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c64:	4b57      	ldr	r3, [pc, #348]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0ee      	beq.n	8001c4e <HAL_RCC_OscConfig+0x37e>
 8001c70:	e014      	b.n	8001c9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7ff fb6f 	bl	8001354 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c78:	e00a      	b.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7ff fb6b 	bl	8001354 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e095      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c90:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1ee      	bne.n	8001c7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d105      	bne.n	8001cae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca2:	4b48      	ldr	r3, [pc, #288]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a47      	ldr	r2, [pc, #284]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8081 	beq.w	8001dba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb8:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d061      	beq.n	8001d88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d146      	bne.n	8001d5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ccc:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <HAL_RCC_OscConfig+0x4fc>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fb3f 	bl	8001354 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff fb3b 	bl	8001354 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e067      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cec:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f0      	bne.n	8001cda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d00:	d108      	bne.n	8001d14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	492d      	ldr	r1, [pc, #180]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d14:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a19      	ldr	r1, [r3, #32]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	430b      	orrs	r3, r1
 8001d26:	4927      	ldr	r1, [pc, #156]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_RCC_OscConfig+0x4fc>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff fb0f 	bl	8001354 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7ff fb0b 	bl	8001354 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e037      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x46a>
 8001d58:	e02f      	b.n	8001dba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <HAL_RCC_OscConfig+0x4fc>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff faf8 	bl	8001354 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7ff faf4 	bl	8001354 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e020      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x498>
 8001d86:	e018      	b.n	8001dba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e013      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d001      	beq.n	8001dba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	42420060 	.word	0x42420060

08001dd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0d0      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d910      	bls.n	8001e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b67      	ldr	r3, [pc, #412]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 0207 	bic.w	r2, r3, #7
 8001dfa:	4965      	ldr	r1, [pc, #404]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b63      	ldr	r3, [pc, #396]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0b8      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d020      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e2c:	4b59      	ldr	r3, [pc, #356]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a58      	ldr	r2, [pc, #352]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e44:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e50:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	494d      	ldr	r1, [pc, #308]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d040      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e76:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d115      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e07f      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8e:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e073      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e06b      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eae:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f023 0203 	bic.w	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4936      	ldr	r1, [pc, #216]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec0:	f7ff fa48 	bl	8001354 <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec8:	f7ff fa44 	bl	8001354 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e053      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 020c 	and.w	r2, r3, #12
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d1eb      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d210      	bcs.n	8001f20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 0207 	bic.w	r2, r3, #7
 8001f06:	4922      	ldr	r1, [pc, #136]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e032      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4916      	ldr	r1, [pc, #88]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	490e      	ldr	r1, [pc, #56]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f5e:	f000 f821 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8001f62:	4602      	mov	r2, r0
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	490a      	ldr	r1, [pc, #40]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001f70:	5ccb      	ldrb	r3, [r1, r3]
 8001f72:	fa22 f303 	lsr.w	r3, r2, r3
 8001f76:	4a09      	ldr	r2, [pc, #36]	; (8001f9c <HAL_RCC_ClockConfig+0x1cc>)
 8001f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_RCC_ClockConfig+0x1d0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff f9a6 	bl	80012d0 <HAL_InitTick>

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40022000 	.word	0x40022000
 8001f94:	40021000 	.word	0x40021000
 8001f98:	08002120 	.word	0x08002120
 8001f9c:	2000001c 	.word	0x2000001c
 8001fa0:	20000020 	.word	0x20000020

08001fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa4:	b490      	push	{r4, r7}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001faa:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fac:	1d3c      	adds	r4, r7, #4
 8001fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fb4:	f240 2301 	movw	r3, #513	; 0x201
 8001fb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fce:	4b22      	ldr	r3, [pc, #136]	; (8002058 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d002      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d003      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0x46>
 8001fe2:	e02d      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe6:	623b      	str	r3, [r7, #32]
      break;
 8001fe8:	e02d      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	0c9b      	lsrs	r3, r3, #18
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ffc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d013      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_RCC_GetSysClockFreq+0xb4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	0c5b      	lsrs	r3, r3, #17
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002016:	4413      	add	r3, r2
 8002018:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800201c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	4a0e      	ldr	r2, [pc, #56]	; (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002022:	fb02 f203 	mul.w	r2, r2, r3
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
 800202e:	e004      	b.n	800203a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	623b      	str	r3, [r7, #32]
      break;
 800203e:	e002      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002042:	623b      	str	r3, [r7, #32]
      break;
 8002044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002046:	6a3b      	ldr	r3, [r7, #32]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3728      	adds	r7, #40	; 0x28
 800204c:	46bd      	mov	sp, r7
 800204e:	bc90      	pop	{r4, r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	08002110 	.word	0x08002110
 8002058:	40021000 	.word	0x40021000
 800205c:	007a1200 	.word	0x007a1200
 8002060:	003d0900 	.word	0x003d0900

08002064 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800206c:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <RCC_Delay+0x34>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0a      	ldr	r2, [pc, #40]	; (800209c <RCC_Delay+0x38>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	0a5b      	lsrs	r3, r3, #9
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002080:	bf00      	nop
  }
  while (Delay --);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1e5a      	subs	r2, r3, #1
 8002086:	60fa      	str	r2, [r7, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f9      	bne.n	8002080 <RCC_Delay+0x1c>
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	2000001c 	.word	0x2000001c
 800209c:	10624dd3 	.word	0x10624dd3

080020a0 <__libc_init_array>:
 80020a0:	b570      	push	{r4, r5, r6, lr}
 80020a2:	2600      	movs	r6, #0
 80020a4:	4d0c      	ldr	r5, [pc, #48]	; (80020d8 <__libc_init_array+0x38>)
 80020a6:	4c0d      	ldr	r4, [pc, #52]	; (80020dc <__libc_init_array+0x3c>)
 80020a8:	1b64      	subs	r4, r4, r5
 80020aa:	10a4      	asrs	r4, r4, #2
 80020ac:	42a6      	cmp	r6, r4
 80020ae:	d109      	bne.n	80020c4 <__libc_init_array+0x24>
 80020b0:	f000 f822 	bl	80020f8 <_init>
 80020b4:	2600      	movs	r6, #0
 80020b6:	4d0a      	ldr	r5, [pc, #40]	; (80020e0 <__libc_init_array+0x40>)
 80020b8:	4c0a      	ldr	r4, [pc, #40]	; (80020e4 <__libc_init_array+0x44>)
 80020ba:	1b64      	subs	r4, r4, r5
 80020bc:	10a4      	asrs	r4, r4, #2
 80020be:	42a6      	cmp	r6, r4
 80020c0:	d105      	bne.n	80020ce <__libc_init_array+0x2e>
 80020c2:	bd70      	pop	{r4, r5, r6, pc}
 80020c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c8:	4798      	blx	r3
 80020ca:	3601      	adds	r6, #1
 80020cc:	e7ee      	b.n	80020ac <__libc_init_array+0xc>
 80020ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d2:	4798      	blx	r3
 80020d4:	3601      	adds	r6, #1
 80020d6:	e7f2      	b.n	80020be <__libc_init_array+0x1e>
 80020d8:	08002130 	.word	0x08002130
 80020dc:	08002130 	.word	0x08002130
 80020e0:	08002130 	.word	0x08002130
 80020e4:	08002134 	.word	0x08002134

080020e8 <memset>:
 80020e8:	4603      	mov	r3, r0
 80020ea:	4402      	add	r2, r0
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d100      	bne.n	80020f2 <memset+0xa>
 80020f0:	4770      	bx	lr
 80020f2:	f803 1b01 	strb.w	r1, [r3], #1
 80020f6:	e7f9      	b.n	80020ec <memset+0x4>

080020f8 <_init>:
 80020f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fa:	bf00      	nop
 80020fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fe:	bc08      	pop	{r3}
 8002100:	469e      	mov	lr, r3
 8002102:	4770      	bx	lr

08002104 <_fini>:
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	bf00      	nop
 8002108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210a:	bc08      	pop	{r3}
 800210c:	469e      	mov	lr, r3
 800210e:	4770      	bx	lr
